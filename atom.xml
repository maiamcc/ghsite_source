<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Maia McCormick]]></title>
  <link href="http://maiamcc.github.io/atom.xml" rel="self"/>
  <link href="http://maiamcc.github.io/"/>
  <updated>2014-10-17T16:17:25-04:00</updated>
  <id>http://maiamcc.github.io/</id>
  <author>
    <name><![CDATA[Maia McCormick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Re-Learning How to Ask Questions]]></title>
    <link href="http://maiamcc.github.io/blog/2014/10/13/re-learning-how-to-ask-questions/"/>
    <updated>2014-10-13T13:36:32-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/10/13/re-learning-how-to-ask-questions</id>
    <content type="html"><![CDATA[<p>I spent a ton of my time at Hacker School learning how to ask questions (or, to put a finer point on it, learning how to <em>not know things</em> and admit to others that I don&rsquo;t know things). The main reason that HS was so hard at first was that I wasn&rsquo;t good at asking qusetions, at admitting when I didn&rsquo;t know things, at letting myself (I feared) appear &ldquo;stupid&rdquo; in front of others. I was still better than some folks at pushing through this, but I wasn&rsquo;t as good as I would have liked. (This is all tied into impostor syndrome, of course.)</p>

<p>I got vastly better at this skill as I spent more time at Hacker School. I grew more comfortable in the environment, I gained trust in the folks around me and in my own abilities, and I came to believe that my asking questions, even ones about really basic (quote-unquote-&ldquo;basic&rdquo;) things, was a display of intelligence rather than a display of ignorance.</p>

<p>What I didn&rsquo;t realize about my shiny new skill of &ldquo;Admitting When I Don&rsquo;t Know Something and Asking Questions&rdquo; was how context-dependent it is. At Hacker School, in person or on Zulip, I feel totally comfortable asking questions about &ldquo;simple&rdquo; things, and admitting that I&rsquo;m totally in over my head with, say, troubleshooting my Virtual Machine installation and would someone please help me, and what is actually the difference between GET and POST because I never really learned it&hellip; that sort of thing. But as I prepare my application for the coming round of <a href="https://opw.gnome.org">OPW</a> and dive head-first into IRC chats about programs and programming styles I&rsquo;ve never used before, that all seem to require strange dependencies or have to be run on X virtual machine with Y stuff built on it, I recognize a feeling from my early days of Hacker School.<!--more--></p>

<p>I&rsquo;m scared. I&rsquo;m intimidated. I feel like I don&rsquo;t belong here, like I don&rsquo;t know enough. Like I&rsquo;m an imposter, and any second I will be found out. And as I force myself through these feelings to ask clarifying questions about whether x and y do in fact need to be run off a Linux VM, or go back to Zulip to ask a question about IRC that I&rsquo;m too embarassed to ask IN the IRC room I&rsquo;m in, or keep silent with a question about how the hell I&rsquo;m going to get started on this project because I figure everyone else knows the answer to that question and admitting that I don&rsquo;t will automatically disqualify me from OPW, I realize that I&rsquo;m not done practicing the skills of Asking Questions and Admitting Ignorance.</p>

<p>I got pretty adept at these things at Hacker School, but the OSS/OPW world is an entirely different environment, and I need to relearn these skills, as well as the self-confidence and trust that I need to apply them. Some of this will be learning the skills of this new world so I feel less like an imposter and more like I can hold my own, even if I don&rsquo;t know x and y. Some of this will be asking &ldquo;dumb&rdquo; questions and realizing that nothing bad happens when I do. Some of this will be talking to other people in this community, growing to trust them, and hearing their experiences with the same thing. And some of this&hellip; will just be time and practice and getting used to it. And when I land in another new environment&ndash;say, my first tech job&ndash;I will likely need to learn all of these skills over again.</p>

<p>Whelp. Time to get to work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Choice Paralysis]]></title>
    <link href="http://maiamcc.github.io/blog/2014/10/06/choice-paralysis/"/>
    <updated>2014-10-06T13:59:28-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/10/06/choice-paralysis</id>
    <content type="html"><![CDATA[<p>Doing one thing at a time is very difficult.</p>

<p>Here I am, first Monday without returning to Hacker School, sitting down to say &ldquo;Okay world, I spent the last three months <em>writing code</em> and it was awesome but I should know something about theory, algorithms, etc.; time to do some studying.&rdquo; I intended to sit down with <a href="http://interactivepython.org/runestone/static/pythonds/index.html">Interactive Python</a> and blaze through a section or two before turning away to work on my other projects, job applications, etc.</p>

<p>INSTEAD, I was filled with a sudden anxiety&ndash;what if Interactive Python isn&rsquo;t the right course for me? What if it&rsquo;s an okay course but there are better ones out there? What if by doing Interactive Python I&rsquo;m missing <em>the perfect algos course for me and this perfect course and I will be like ships passing in the night, never knowing what we might have had together, and all because I chose to work on Interactive Python</em>.<!-- more --> I looked at a Corsera course, I looked at the SICP study group that some HSers are setting up, I debated whether I wanted to get involved with said study group remotely even though it&rsquo;s based on daily in-person meetings, all worrying that I would miss my soul-mate algos course if I made the wrong move.</p>

<p>Then I realized that I was being silly.</p>

<p>I&rsquo;m off to spend an hour on Interactive Python, and if it isn&rsquo;t working for me, I&rsquo;ll reevaluate. At worst, I&rsquo;ll work through it in a few weeks, learn some stuff, and try another course!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons in Default Function Arguments]]></title>
    <link href="http://maiamcc.github.io/blog/2014/09/29/lessons-in-default-function-arguments/"/>
    <updated>2014-09-29T18:16:56-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/09/29/lessons-in-default-function-arguments</id>
    <content type="html"><![CDATA[<p>Today on &ldquo;Bugs that everyone already knew about but Maia found out about for the first time so will write up anyway&rdquo;, we&rsquo;re going to talk about the perils and pitfalls of using mutable objects as default arguments for functions in Python. (This episode brought to you by Maia&rsquo;s contradance database and the letter Y.)</p>

<p>No, nothing went wrong in my code that caused me to learn this lesson, but multiple code reivewers raised red flags about this line in my code: <code>def resolve_query_dict(d, moves_list=Move.objects.all())</code>. <code>Move.objects.all()</code>, by the way, is a fancy Django function that returns a list of all of the <code>Move</code> objects in your database, and since I would likely never be running this code over an extended period of time while things were added to the database, accidentally freezing the value of &ldquo;all of the moves in my database&rdquo; wouldn&rsquo;t have really been an issue, but the dangers of writing code like the above are still whacky and interesting. Basically, odd things happen when you use mutable objects or called functions as default variables in your functions.<!-- more --></p>

<p>Let&rsquo;s define a helper function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">make_a_list</span><span class="p">():</span>
</span><span class='line'>    <span class="o">...</span> <span class="k">print</span> <span class="s">&quot;Making a list...&quot;</span>
</span><span class='line'>    <span class="o">...</span> <span class="k">return</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then some random function that takes a (called) function as a default value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">list_length</span><span class="p">(</span><span class="n">mylist</span> <span class="o">=</span> <span class="n">make_a_list</span><span class="p">()):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">mylist</span><span class="p">)</span>
</span><span class='line'><span class="n">Making</span> <span class="n">a</span> <span class="nb">list</span><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The thing that&rsquo;s odd about the code that we just ran is that it printed &ldquo;Making a list&hellip;&rdquo;, which implies that the <code>make_a_list</code> function got <em>called</em>, even though all we did was assign it as a default variable. Interesting. Now what happens if we run <code>list_length</code>?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">list_length</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">])</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">list_length</span><span class="p">()</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you pass it an argument, it runs just as you&rsquo;d expect it to. If you don&rsquo;t pass it arguments, it returns the value you&rsquo;d expect, but notice that it doesn&rsquo;t print &ldquo;Making a list&hellip;&rdquo;&ndash;which implies that it hasn&rsquo;t run the <code>make_a_list</code> function! The conclusion we draw here is that when you use a function as a default argument, that function is called (and the value bound) <em>at assignment</em>, <em>not</em> whenever you run its container function. So that means that if you want your default-value-function to run every time you call its container function&hellip; well, it won&rsquo;t! If you needed more convincing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randint</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">plus_one</span><span class="p">(</span><span class="n">num</span><span class="o">=</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1000</span><span class="p">)):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">num</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">plus_one</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="mi">6</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="c"># that worked as we expected it to</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">plus_one</span><span class="p">()</span>
</span><span class='line'><span class="mi">42</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">plus_one</span><span class="p">()</span>
</span><span class='line'><span class="mi">42</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">plus_one</span><span class="p">()</span>
</span><span class='line'><span class="mi">42</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">plus_one</span><span class="p">()</span>
</span><span class='line'><span class="mi">42</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">plus_one</span><span class="p">()</span>
</span><span class='line'><span class="mi">42</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">plus_one</span><span class="p">()</span>
</span><span class='line'><span class="mi">42</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmm. It would appear that we aren&rsquo;t getting a new random number every time we run this function.</p>

<p>That&rsquo;s not the only weird thing about default arguments, though. Things can get messy even when you&rsquo;re not setting functions as default args&ndash;really, all it takes to break things is a mutable object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">append_one</span><span class="p">(</span><span class="n">mylist</span> <span class="o">=</span> <span class="p">[]):</span>
</span><span class='line'><span class="o">...</span>     <span class="n">mylist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">mylist</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">append_one</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">append_one</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">append_one</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">append_one</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">append_one</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>As with the function-as-default-arg example, your default argument binds <em>at definition</em>&ndash;and what&rsquo;s more, it binds to a specific object in memory. So every time you call <code>append_one</code>, you&rsquo;re not appending one to a new empty list, you&rsquo;re appending one to <em>that exact empty list that you created in memory, which now has more and more things in it</em>. It&rsquo;s the same as if you passed in an existing, named list as your default:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">stuff</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">append_one</span><span class="p">(</span><span class="n">mylist</span> <span class="o">=</span> <span class="n">stuff</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="n">mylist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">mylist</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">append_one</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">append_one</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">append_one</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Perhaps it&rsquo;s a bit more intuitive this way, but the exact same thing is happening in the previous example; the function is modifying a distinct object in memory, whether it was named before it got passed as a default argument or not.</p>

<p>Whacky fun! And a valuable lesson learned: <em>don&rsquo;t use mutable objects or functions as default values in your functions</em> unless you want a whole lot of hilarious code hijinks. (Which, hey, maybe you do, no judgements here!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript/JQuery 101]]></title>
    <link href="http://maiamcc.github.io/blog/2014/09/24/javascript-jquery-101/"/>
    <updated>2014-09-24T16:28:38-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/09/24/javascript-jquery-101</id>
    <content type="html"><![CDATA[<p>Funnily enough, when you&rsquo;re teaching yourself how to do stuff pretty much from scratch, sans tutorials or guidance, you miss a few crucial points. Weird, right? Here (mostly for my own records, but you can read it if you want!) are the things I learned this afternoon from some code review of my Javascript/JQuery/Datatables code for my contra database:</p>

<p>JS != JQuery!!! They&rsquo;re different things! They each have different sets of methods, and you need to keep track of whether any given thing you&rsquo;re dealing with in web scripting is a JQuery or DOM (and therefore JS) object. <!-- more -->If it&rsquo;s avoidable, don&rsquo;t mix JS and JQuery&ndash;be consistent within one document. Usually, JQuery is more precise and prettier. Consider using dollar signs at the beginning of your variable names to indicate that they point to JQuery objects, so you don&rsquo;t get confused. Most if not all JS functions have (generally shorter, prettier) JQuery equivalents. Here are some that I replaced in my code today:</p>

<table><tr><td>
    <strong>JS</strong>
</td><td>
    <strong>JQuery</strong>
</td></tr>
<tr><td>
<code>
    getElementByID("foo")
</code>
</td><td>
<code>
    $('#foo')
</code>
</td></tr>

<tr><td>
<code>
    getElementsByClassName("bar")
</code>
</td><td>
<code>
    $('.bar')
</code>
</td></tr>

<tr><td>
<code>
    this
</code>
</td><td>
<code>
    $(this)
</code>
</td></tr>

<tr><td>
<code>
    .setAttribute("foo","bar")
</code>
</td><td>
<code>
    .attr("foo", "bar")
</code>
</td></tr>

<tr><td>
<code>
    .getAttribute("foo")
</code>
</td><td>
<code>
    .attr("foo")
</code>
</td></tr>

<tr><td>
<code>
    .value
</code>
</td><td>
<code>
    .val()
</code>
</td></tr>

<tr><td>
<code>
    .parentNode
</code>
</td><td>
<code>
    .parent()
</code>
</td></tr>
</table>


<p><p>
JQuery functions like <code>$(".bar")</code> or <code>$(".mytag")</code> (which gets all elements matching class &ldquo;bar&rdquo; and html tag &ldquo;mytag&rdquo;, respectively) return arrays of DOM elements. If you want to get something from this array, it can be tempting to pluck it from its index, a la <code>$(".bar")[2]</code>. <em>Be warned</em>: this returns a DOM element, and therefore you can&rsquo;t do shiny JQuery stuff to it. Instead, get that same element as a JQuery object with <code>$(".bar").eq(2)</code> (where the <code>eq</code> function takes as an argument the index of the thing you want to get out of the array). I can&rsquo;t tell you how much pain this would have saved me if I had known this at the beginning of my project.</p>

<p>On the &ldquo;pesky formatting details&rdquo; front, JS indents with only two spaces, and puts semicolons after every line that doesn&rsquo;t end in a curly brace. I swear, this will take me another three years to do properly and consistently. And when I master it, it will ruin my Python. Yeargh. Also, Javascript pitches possibly the least helpful errors ever. Okay, complaining over.</p>

<p>Anyway, I have a working (if ugly) search page that magically sprouts new search fields everywhere, and a working (if ugly) datatable that displays the dances in my database with collapsable child rows for additional information, and a understand a little bit more about Javascript/JQuery for web work! Huzzah!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So Much for That Project]]></title>
    <link href="http://maiamcc.github.io/blog/2014/09/17/so-much-for-that-project/"/>
    <updated>2014-09-17T12:22:01-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/09/17/so-much-for-that-project</id>
    <content type="html"><![CDATA[<p>Alas, it seems that my dreams of writing a choral harmonizer in the style of J.S. Bach have to be put to bed until another day. Susan and I have been taking various stabs at this, triyng out a few ineffective Python midi programs (one of these, incidentally, had ZERO documentation and was THE MOST FRUSTRATING THING EVER) before settling on <a href="https://code.google.com/p/mingus/">mingus</a>, a midi/music theory Python library. Unfortunately, it seems like no one&rsquo;s addressed any bug reports since 2011, so when we realized that midi read-in was totally borked, we were a little stymied. Specficially, if we gave it this file as input:</p>

<p><img src="http://maiamcc.github.io/images/mingusbug_input.png" alt="Input file" /></p>

<p>It returned this mess here:</p>

<p><img src="http://maiamcc.github.io/images/mingusbug_output.png" alt="Output file" /></p>

<!-- more -->


<p>For the record, what seems to be going on here, as far as we can tell, is that while the notes have been preserved, the rhythms have all shifted over by one. The first note has been magically converted into a quarter note, and each note after that has the duration that ought to have belonged to the note before it. (To explain it another way: assume that we have a list of original notes and we&rsquo;re making a list of new notes, where each new note OUGHT to be identical to its corersponding original note. Instead, we get <code>newnote[0].duration == quarter</code>, <code>newnote[1].duration == orignote[0].duration</code>, <code>newnote[2].duration == orignote[1].duration</code>, etc.)</p>

<p>So, <a href="https://code.google.com/p/mingus/issues/detail?id=125">we&rsquo;ve submitted a bug report</a> but we&rsquo;re not optimistic since, like I mentioned, the last answered bug is from 2011. But one day, when my heart has healed, I&rsquo;ll go off looking for ways to fix this or for other Python midi libraries that are suitable for this project, and then I&rsquo;ll take another swing at the choral generator! (Any suggestions? Send them my way! I&rsquo;m looking for a lib that can read, inspect, write, and output midi.)</p>

<p>Until then, as I near the end of HS, it&rsquo;s actually surprisingly freeing to have one less thing to worry about getting done. Obviously I&rsquo;m not going to finish all of this stuff before HS ends, but here&rsquo;s what&rsquo;s on my docket at the moment:</p>

<ul>
<li>contradance database (search logic, and eventually expanding and populating database)</li>
<li>sudoku solver (so close&hellip;!)</li>
<li>more work on the fabulous <a href="http://hypatia.ca/">Leigh Honeywell</a>&rsquo;s <a href="https://github.com/hypatia/virtuoso">Virtuoso Project</a>, which will soon be a web app that doles out writing exercises to fight imposter syndrome, and is also a fabulous excuse for me to learn Bootstrap and play with design.</li>
<li>goob.py, a fake git</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asking for TOO MUCH Help?]]></title>
    <link href="http://maiamcc.github.io/blog/2014/09/16/asking-for-too-much-help/"/>
    <updated>2014-09-16T12:47:54-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/09/16/asking-for-too-much-help</id>
    <content type="html"><![CDATA[<p>(Apparently some people at Hacker School think I&rsquo;m an Iron Blogger, despite me being nothing of the sort. There&rsquo;s no money riding on whether or not I make consistent blog posts&ndash;but I figure I should do what I can to sustain this favorable impression of me!)</p>

<p>Since my HS halfway check-in, I&rsquo;ve resolved to ask more questions and not let myself get stuck banging my head against problems that could be solved in a hot second by any of the three people sitting next to me. I think that I&rsquo;ve done a pretty good job with this resolution; I ask for help way more frequently, and as a result, I think I get more done. However, I feel the need to remind myself that there is such a thing as <em>asking for too much help</em>.</p>

<p>Take this example: I was sitting down with Tristan, a fellow HSer, attempting to set up virtualenv and get all of my permissions and installs un-borked. I was totally in over my head, having never used virtualenv before, and he was helping me sort it out. There was some funky stuff that needed fixing having to do with my $PATH being invalid because one of the folder names contained a space. We dealt with that issue, and now most of the stuff worked, but I still couldn&rsquo;t manage to run bpython from inside my virtualenv. I showed Tristan the error message my computer was spewing, and asked him, &ldquo;What&rsquo;s going on?&rdquo;</p>

<p>His response: &ldquo;What do you think is going on?&rdquo;</p>

<p>Me: &ldquo;Well, it won&rsquo;t run bpython!&rdquo;</p>

<p>Him: &ldquo;Come on, you can do better than that.&rdquo;<!-- more --></p>

<p>When he said this, I was somewhat shocked to realize that I hadn&rsquo;t even fully read the text of the error message&ndash;I assumed that it would be gibberish to me, as such messages often are, and that I would need to find someone with greater terminal-fu to help me decipher it.</p>

<p>I can&rsquo;t remember now what exactly the problem was, but it was something having to do with the fact that my shiny new un-borked $PATH wasn&rsquo;t finding bpython because I had sudo installed it somewhere outside the virtualenv&hellip; (That sounds kind of illogical now that I write it, but I promise it was a real problem.) Regardless, by carefully reading the error message and talking it through with Tristan, I was able to figure out what had to be done pretty much on my own. It was super exciting, of course, because for most of Hacker School the terminal has remained an almost entirely opaque black box of sorcery (and possibly gnomes), but more than that, it made me sit up and realize that it <em>is</em> within my power to solve a lot of the problems that I come across.</p>

<p>Now I have two things to balance. Obviously, I want to keep asking questions, learning new things, keeping myself from getting stuck in ruts. But there&rsquo;s also something to be said for that fifteen-minute window to work on a problem before I turn to Zulip or the person next to me. I tend to assume that anything I don&rsquo;t know is a result of my limited programming background, and is something that I can learn <em>massively</em> faster from a person than from hunting around on StackOverflow. And yes, this is often the case, but when it&rsquo;s not&ndash;or even when it is&ndash;the trouble-shooting and debugging and StackOverflow-ing and playing around in the REPL are all supremely valuable skills. I can solve my own problems more often than I expect, and should remember that!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Observations From Phonebook Code Review]]></title>
    <link href="http://maiamcc.github.io/blog/2014/09/12/observations-from-phonebook-code-review/"/>
    <updated>2014-09-12T15:38:52-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/09/12/observations-from-phonebook-code-review</id>
    <content type="html"><![CDATA[<p>Here are some gleanings from Amy&rsquo;s code review of <a href="https://github.com/maiamcc/phonebook">my phonebook applet</a>, and some self-study. Mostly for my own records and so I actually absorb all of this by writing out, but if anyone has comments, additions, disagreements with anything I&rsquo;ve written here, fire away!</p>

<ul>
<li>misc. layout stuff, like putting import statements in alphabetical order</li>
<li>avoid global vars when possible. I already knew this, but it&rsquo;s good to remember. For example, if you&rsquo;ve assuming your program will be run on the command line, you can put global vars in the <code>main()</code> function.</li>
<li>functions that only incedentally return stuff are <em>bad news</em>. I had a function called <code>phonebook_exists</code> that checked to see if the phonebook you were trying to look up existed; if it didn&rsquo;t exist, the func. would throw an error, and if it did, it would return the data of the phonebook. Which in retrospect was super weird because nothing the function name indicated that it was what you should use to get the contents of a saved phonebook. A much more sensible way to do this is to have a function called <code>read_phonebook</code> which attempts to return the contents of the saved phonebook, but if it fails (which you figure out with a try/except), then it throws an error. (Incidentally, I had a similar confusion with when things should and shouldn&rsquo;t be returned in another project I&rsquo;m working on, my bootleg homemade git. I had a function called <code>save_at_hash</code> that would hash a file, save it at its hash, and then return the hash. Why did this function return the hash? I assumed it would be useful. Couldn&rsquo;t really tell you why. I ended up refactoring it into two functions, <code>make_hash</code>&ndash;which took a file and returned a hash&ndash;and <code>save_at_hash</code>&ndash;which took a file and a hash and saved a copy of the file at that hash.)<!-- more --></li>
<li><p>relatedly, try/except is your friend. I suspect that if you need a function that checks something&rsquo;s validity before running another function on it, if the check is simple, that checking func is probably unnessary and you can handle that behavior with a try/except in the function that actually does stuff. Pydocs puts it wonderfully:</p>

<blockquote><p><a href="https://docs.python.org/2/glossary.html#term-eafp">EAFP</a> (Easier to Ask for Forgiveness than Permission):</p>

<p>This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many <code>try</code> and <code>except</code> statements. The technique contrasts with the <a href="https://docs.python.org/2/glossary.html#term-lbyl">LBYL</a> style common to many other languages such as C.</p></blockquote></li>
<li><p>but even though try/except is great, be wary! It can make debugging a mess&ndash;had something in here that caught TypeErrors, which exploded on Amy when she made a change that caught a type error, but my program printed &ldquo;more arguments needed&rdquo; instead of anything helpful like, y&#8217;know, a stacktrace.</p></li>
<li>if you&rsquo;re defining a dict., it looks prettiest to put spaces on both sides of the colon</li>
<li>string concat. is a) ugly and b) not very efficient. Use string interpolation (or in a pinch, <code>join</code>) instead.</li>
<li>you can search for substrings with <code>"substring" in "string"</code>! Who knew? I wrote a whole human-written-input parser using <code>if string.find(substring) &gt; -1</code>. My life has just changed.</li>
<li>in <code>for</code> loops, explicit var names are the way to go. I&rsquo;m usually decent about this when looping through lists, strings, whatever, but for some reason I tend to look through dictionaries with a very undescript <code>for key in mydict</code>.</li>
<li><code>.txt</code> extensions are totally unnecessary. Text files don&rsquo;t even need extensions.</li>
<li>streamlined, logical, one-thing-per-commit git histories are awesome!</li>
<li><code>str.startswith</code> and <code>str.endswith</code> are a thing! (Are both things?) Exciting! Now I want to go through all of the code I&rsquo;ve been writing recently and use these to replace any hard-coded integers in string manipulation, because that stuff&rsquo;s gross, man.</li>
<li>tests. Tests are good. Write them.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taming the Octopress/All About Git]]></title>
    <link href="http://maiamcc.github.io/blog/2014/09/02/taming-the-octopress/"/>
    <updated>2014-09-02T17:59:40-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/09/02/taming-the-octopress</id>
    <content type="html"><![CDATA[<p>I was messing around with my website yesterday, and trying to make two sub-websites for my &lsquo;Music&rsquo; and &lsquo;Programming&rsquo; hats in a single Octopress install, and I <em>really was going to be on time to my dinner plans</em> except once my website experiment was borked and I tried to restore my previous site&hellip; well, long story short, it was the borked-est, and I spent an hour then and an hour today hunting around with <a href="http://akaptur.github.io/">Allison</a> trying to fix the problem. Turns out that in trying to roll back my changes, I&rsquo;d introduced some discrepancy between my <code>master</code> and <code>gh-pages</code> branches, and I could get around all of this on github with force pushes (<code>-f</code>), but not so easily with actually deploying my site (<code>rake deploy</code>). In the end, I had to go into my Rakefile and add a plus sign somewhere that tells Octopress not to worry whether it&rsquo;s doing fast-forward commits[1] and just commit anyway.</p>

<p>So, my website is alive, I have lost hours of my life to the jaws of the Octopress, and I may be switching to Jekyll or Pelican soon. But in the meantime, all of this made me intensely curious about git! I hit up <a href="http://maryrosecook.com/">Mary</a> for a mini-seminar, and I will now write it all out on my blog to make sure I understood it. Feel free to read along, learn from my simplistic explanation, correct my gross misunderstandings, etc.! So now, on to our feature presentation:</p>

<h2>All About Git!</h2>

<h3>The Bestest SCM with the Worstest UI</h3>

<h4>All of your Git-age lives in the .git folder</h4>

<p>When you run <code>git init</code>, all it does is create a <code>.git</code> folder. That&rsquo;s it! Your machine knows what folders are and aren&rsquo;t by the presence or absence of a <code>.git</code> directory. <code>.git</code> is a hidden folder, so to see it, type <code>ls -a</code>. Whenever you add or commit things to your git repo, they&rsquo;ll get stored in here.<!-- more --></p>

<p>I&rsquo;m now in the directory of my new project, <code>gittest</code>. It contains two files, <code>a</code> and <code>b</code>, and isn&rsquo;t yet a git repo. When I look at what&rsquo;s inside it, it looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>maia$ ls -a
</span><span class='line'>.   ..  a   b</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s make it a git repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>maia$ git init
</span><span class='line'>Initialized empty Git repository in [stuff]/gittest/.git/
</span><span class='line'>maia$ ls -a
</span><span class='line'>.   ..  .git    a   b</span></code></pre></td></tr></table></div></figure>


<p>We can see the <code>.git</code> folder! Success! Here&rsquo;s the stuff inside it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>maia$ ls -a
</span><span class='line'>.       HEAD        description info        refs
</span><span class='line'>..      config      hooks       objects</span></code></pre></td></tr></table></div></figure>


<h4>Anatomy of a commit: blobs, trees, commits</h4>

<p>The git magic happens largely in the <code>/objects</code> folder. Right now it&rsquo;s got two folders in it that we don&rsquo;t care about, <code>info</code> and <code>pack</code>, which have to do with misc. git magic. But this is where stuff goes when we add/commit it. So let&rsquo;s do that.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>maia$ git add -A
</span><span class='line'>maia$ ls .git/objects/
</span><span class='line'>31  e9  info    pack</span></code></pre></td></tr></table></div></figure>


<p>31 and e9 are both folders, and each has only one object in it, files with big long gibberish names: <code>31/e9dce72edaeb87f2b007b09230bfd5008da63e</code> and <code>e9/1ace6ef46e2244fc3588bdead8f66b35b20d12</code>. They contain gibberish, which is fancy git compression/encoding of the contents of file a and b. The folder name and file name, taken together, make a big long hash that you can use to recover the original file contents[2] (<code>xx/yyyyyy</code> &ndash;> the hash <code>xxyyyyyy</code>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>maia$ glook e91ace6ef46e2244fc3588bdead8f66b35b20d12
</span><span class='line'>stuff inside file a</span></code></pre></td></tr></table></div></figure>


<p>These big long hashes point to files, known in git-land as <code>blobs</code>. Right now these are staged. After we commit them, <code>.git/objects</code> looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>maia$ ls .git/objects/
</span><span class='line'>31  81  a7  e9  info    pack</span></code></pre></td></tr></table></div></figure>


<p>We have two new directories in here since our commit, both in the same <code>xx/yyyyyy</code> format where <code>xxyyyyyy</code> is a big long hash thing we can use to access the thing inside. Here&rsquo;s the stuff inside the two new things:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>maia$ glook 81ad97f6d112d96081fffc3d3b729828917eff5e
</span><span class='line'>tree a720b6d097b88601c3647be863269539ccc7f64d
</span><span class='line'>author maianess &lt;maia.mcc@gmail.com&gt; 1409698376 -0400
</span><span class='line'>committer maianess &lt;maia.mcc@gmail.com&gt; 1409698376 -0400
</span><span class='line'>
</span><span class='line'>first commit
</span><span class='line'>maia$ glook a720b6d097b88601c3647be863269539ccc7f64d
</span><span class='line'>100644 blob e91ace6ef46e2244fc3588bdead8f66b35b20d12    a
</span><span class='line'>100644 blob 31e9dce72edaeb87f2b007b09230bfd5008da63e    b</span></code></pre></td></tr></table></div></figure>


<p>The first thing is a <code>commit</code> object. It lists a <code>tree</code> object, author, committer, and commit message (which here is &ldquo;first commit&rdquo;). The second thing is a <code>tree</code> object: it contains references to all files or folders (which would also be tree objects) in the given commit. This tree points to our files a and b (identified by their magic git hashes).</p>

<p>OH, but also, from the second commit onward, commit objects look a little different. They have one additional line that provides the hash of the parent, or the commit directly before that one. I added a file <code>c</code> in directory <code>foo</code>. Here&rsquo;s what my second commit looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>maia$ glook 33380bb5dfd152bf72dad49c3e388bccee1a4dfb
</span><span class='line'>tree 0d656c0ff73ea5315ec498acf144df9958e48819
</span><span class='line'>parent 81ad97f6d112d96081fffc3d3b729828917eff5e
</span><span class='line'>author maianess &lt;maia.mcc@gmail.com&gt; 1409709920 -0400
</span><span class='line'>committer maianess &lt;maia.mcc@gmail.com&gt; 1409709920 -0400
</span><span class='line'>
</span><span class='line'>second: added directory 'foo'</span></code></pre></td></tr></table></div></figure>


<p>To sumarize, the three kinds of objects you&rsquo;ll find in <code>.git/objects</code> look like this.</p>

<h5>Blob, aka file:</h5>

<p><em>[encoded contents of the file]</em></p>

<h5>Commit:</h5>

<p><em>tree: [hash of tree pointing to the files of this commit]<br>
author: [name]<br>
[commit message]</em></p>

<h5>Tree:</h5>

<p><em>[hash of a blog (file)]<br>
[hash of a blog (file)]<br>
[hash of a blog (file)]<br>
&hellip;as many times as you want<br>
[hash of a tree (folder)]<br>
[hash of a tree (folder)]<br>
&hellip;as many times as you want</em></p>

<h4>How a few commits might look</h4>

<p>Git objects contain the hashes of other git objects, which is how the files keep track of each other. Given a commit, you can find the tree representing the root, and from there all of the files and/or folders (represented by trees) that it contains. From that same commit, you can also find it&rsquo;s parent commit, and then <em>its</em> parent, each with their attendant file-states, and so can trace your history back. Let&rsquo;s look at fun diagrams!</p>

<p>Here&rsquo;s my initial commit, when the file tree looks like this, and my git looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>├── a
</span><span class='line'>├── b</span></code></pre></td></tr></table></div></figure>


<p><img src="http://maiamcc.github.io/images/git1.png" alt="Git diagram" /></p>

<p>Now let&rsquo;s say I add a directory <code>foo</code>, and a file in foo <code>c</code>, and make changes to <code>a</code> and <code>b</code>. The file tree now looks like this, and my git looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>├── a
</span><span class='line'>├── b
</span><span class='line'>└── foo
</span><span class='line'>    └── c</span></code></pre></td></tr></table></div></figure>


<p><img src="http://maiamcc.github.io/images/git2.png" alt="Git guts" /></p>

<p>You see that the main tree, <code>tree2</code>, is pointing directly to <code>a</code> and <code>b</code> but not to <code>c</code>&ndash;rather, it points to <code>tree2.1</code>, which points to <code>c</code>. It looks this way because git uses trees to represent directories; it references files living in subdirectories via trees (representing those directories) referencing those files.</p>

<p>Note that git is still storing (in super-compact encoded form) all previous versions of the files, and given this network of things-that-contain-hashes-of-other-things, we know exactly where to look for any version of any file we want to find. And git only makes the necessary changes. Look what happens if we change <code>a</code> and <code>c</code> but leave <code>b</code> the same:</p>

<p><img src="http://maiamcc.github.io/images/git3.png" alt="Git guts" /></p>

<p>There&rsquo;s no need to make another representation of <code>b</code>, since <code>b</code> hasn&rsquo;t been changed this commit. Instead, where the tree has to point to <code>b</code>, it points to the hash of the <em>existing</em> version of <code>b</code>.</p>

<p>So, now I understand a biiiiit more about the whacky world of git and just what these cryptic commands are doing! I even understand pointers and branching and detached head state and all that a bit better, but that is perhaps another post for another day. Cheers!</p>

<p>[1] To quote from the Git docs: &ldquo;When you try to merge one commit with a commit that can be reached by following the first commit’s history, Git simplifies things by moving the pointer forward because there is no divergent work to merge together — this is called a &lsquo;fast forward&rsquo;.&rdquo; Or, look at this <a href="https://sandofsky.com/images/fast_forward.pdf">explanation in pretty pictures</a>. By default, Octopress will only deploy (which includes a commit) on a fast-forward, to avoid accidentally messing up any intermediate branched stuff.</p>

<p>[2] <code>glook</code> is a shortcut I made; the full command to get file contents from one of these hashes is <code>git cat-file -p</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nested Functions]]></title>
    <link href="http://maiamcc.github.io/blog/2014/08/28/nested-functions/"/>
    <updated>2014-08-28T11:20:16-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/08/28/nested-functions</id>
    <content type="html"><![CDATA[<p>Know what&rsquo;s cool? Nested functions.</p>

<p>The other day, as I was making this craaaazy dance parser (that&rsquo;s getting more and more convoluted by the minute), Alan suggested a really baller way of organizing it: using a bunch of little mini-parser functions that all look for something specific in your text, and smooshing related parsers together into one macro-parser that runs all of them in turn until one returns something. In Alan&rsquo;s lovely mock-up code that I&rsquo;m shamelessly copying over here, that might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">contains_an_a</span><span class="p">(</span><span class="nb">input</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">input</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">contains_a_b</span><span class="p">(</span><span class="nb">input</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">input</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;b&quot;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">one_of</span><span class="p">(</span><span class="n">parsers</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">parser</span><span class="p">(</span><span class="nb">input</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">parsers</span><span class="p">:</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="n">p</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">result</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">parser</span>
</span><span class='line'>
</span><span class='line'><span class="n">contains_an_a_or_a_b</span> <span class="o">=</span> <span class="n">one_of</span><span class="p">([</span><span class="n">contains_an_a</span><span class="p">,</span> <span class="n">contains_a_b</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The handy thing about having all of these bite-size functions is that none of them gets too crazy bulky, and also, since they&rsquo;re functions (and not dicts like I was using earlier), I can use regexes in them! I&rsquo;m also jamming on the idea of passing functions to other functions, so I made an even bigger function called <code>use_parser</code> that takes a parser, a default value, and an &lsquo;ask&rsquo;, which it uses to ask the user (via raw_input) what the value should be. This way, I can take a single parser and customize it in a variety of ways. Say for example I have a distance parser: for do-si-dos and gypsies it should default to False (because those moves don&rsquo;t necessarily need to take a distance) and for allemandes it should ask the user, &ldquo;what&rsquo;s the value of &lsquo;dist&rsquo; here?&rdquo;<!-- more --></p>

<p>But there&rsquo;s something odd going on here that initially threw me for a loop. (&hellip;No lie, it kind of still does.) And that&rsquo;s defining a function INSIDE of another function!</p>

<p>I got tripped up the first time when I tried to check if the parser returned anything, with code that looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">one_of</span><span class="p">(</span><span class="n">parsers</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">parser</span><span class="p">(</span><span class="nb">input</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">parsers</span><span class="p">:</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="n">p</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">result</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">parser</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">parser</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Your parser didn&#39;t return anything!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But even when the parser returned None, my print statement didn&rsquo;t get tripped. What&rsquo;s happening here is that <code>return parser</code> isn&rsquo;t returning a value, <em>it&rsquo;s returning a function</em>, and that function, by virtue of existing, will always evaluate to <code>True</code>. That&rsquo;s the reason <code>contains_an_a_or_a_b = one_of([contains_an_a, contains_a_b])</code> makes a new function rather that returning a value: because <code>one_of</code> returns a function <em>without calling it</em>. That&rsquo;s why this works:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">math</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">y</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>         <span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">add</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">add_to_5</span> <span class="o">=</span> <span class="n">math</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">add_to_5</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">function</span> <span class="n">add</span> <span class="n">at</span> <span class="mh">0x104502f50</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="c"># Look: Python recognizes this thing that I just defined as a function</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">add_to_5</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="mi">105</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="c"># and it takes arguments just like a normal function.</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="c"># since math(x) returns a function, we can do</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="c"># weird-lookin&#39; stuff like this:</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">math</span><span class="p">(</span><span class="mi">30</span><span class="p">)(</span><span class="mi">40</span><span class="p">)</span>
</span><span class='line'><span class="mi">70</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Python, functions are first-class objects, which means they can be passed as arguments and manipulated just like other data types. Which lets you do neat things like define functions inside other functions, and return functions from functions which you can then call later with the arguments that you choose, etc. etc. Cool stuff!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slicing Is Not Enough (or, Adventures in Deep Copy)]]></title>
    <link href="http://maiamcc.github.io/blog/2014/08/26/slicing-is-not-enough/"/>
    <updated>2014-08-26T11:56:57-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/08/26/slicing-is-not-enough</id>
    <content type="html"><![CDATA[<p>The sudoku solver that I&rsquo;m working on with <a href="https://mlauter.github.io/">Miriam</a> was nearly finished before it started when we were playing around with ways to draw a board to terminal. I came to the table with some initial code I had written&ndash;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">draw_board</span><span class="p">(</span><span class="n">board</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">9</span><span class="p">):</span>
</span><span class='line'>        <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="s">&quot;|&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;|&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">row_string</span> <span class="o">=</span> <span class="s">&quot;  &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">]:</span>
</span><span class='line'>            <span class="k">print</span> <span class="n">row_string</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;________________________________&quot;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="n">row_string</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">newboard</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the shiny output!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">myboard</span> <span class="o">=</span> <span class="n">newboard</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">draw_board</span><span class="p">(</span><span class="n">myboard</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">________________________________</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">________________________________</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything was awesome! Or so I thought. But look what happened when I ran the code again.<!-- more --></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">draw_board</span><span class="p">(</span><span class="n">myboard</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">________________________________</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">________________________________</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>And again.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">draw_board</span><span class="p">(</span><span class="n">myboard</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">________________________________</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">________________________________</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>AAAAAHHHH!!! THE VERTICAL LINES ARE ATTACKING! RUN FOR YOUR LIVES!</p>

<p>At this point, being a clever programmer, I realized that I was changing the myboard array every time, inserting more and more vertical lines every time at indeces 3 and 6 every time I called <code>draw_board</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">myboard</span>
</span><span class='line'><span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span>
</span><span class='line'><span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span>
</span><span class='line'> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;</span>
</span><span class='line'><span class="o">|</span><span class="s">&#39;, 0, 0, 0], [0, 0, 0, &#39;</span><span class="o">|</span><span class="s">&#39;, &#39;</span><span class="o">|</span><span class="s">&#39;, &#39;</span><span class="o">|</span><span class="s">&#39;, 0, &#39;</span><span class="o">|</span><span class="s">&#39;, 0, &#39;</span><span class="o">|</span><span class="s">&#39;, 0, &#39;</span><span class="o">|</span><span class="s">&#39;, 0, 0, 0], [0, 0,</span>
</span><span class='line'><span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I handily revised my code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">draw_board</span><span class="p">(</span><span class="n">board</span><span class="p">):</span>
</span><span class='line'>    <span class="n">copyboard</span> <span class="o">=</span> <span class="n">board</span><span class="p">[:]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">9</span><span class="p">):</span>
</span><span class='line'>        <span class="n">copyboard</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="s">&quot;|&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">copyboard</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;|&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">row_string</span> <span class="o">=</span> <span class="s">&quot;  &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">copyboard</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">]:</span>
</span><span class='line'>            <span class="k">print</span> <span class="n">row_string</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;________________________________&quot;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="n">row_string</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of modifying <code>board</code>, I was modifying <code>copyboard</code>, a <em>new</em> object made by slicing <code>board</code>. Since it wasn&rsquo;t point back to the original array passed into the function, I reasoned, the original array wouldn&rsquo;t be modified, and I could continue calling <code>draw_board(myboard)</code> to my heart&rsquo;s content.</p>

<p>But, horror of horrors! The vertical lines kept attacking! I thought I knew how slicing worked! At this point I brought to code to Miriam, stumped. We did a sanity check:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="p">[:]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">c</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you point a new object back to an existing object, then they&rsquo;re identical and the new object always refers back to the old one, <em>but</em> you can create a new list (via slicing) that is identical to the old list but doesn&rsquo;t refer back to it, has a separate identity, can be called and modified separately, etc. What was going onnn???</p>

<p>The problem, we eventually discovered, was with nested lists. Turns out that slicing is not enough: you get a <em>new</em> list of lists, but all the lists inside point back to the old lists.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="p">[:]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span>
</span><span class='line'><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">c</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">is</span> <span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>So even though we copied the board with slicing&ndash;<code>copyboard = board[:]</code>&ndash;all of the rows in <code>copyboard</code> still pointed at the rows in <code>board</code>: copyboard[i]<code>and</code>board[i] were the same thing, so modifying <code>copyboard</code> changed <code>board</code> as well, leading to the endless insertion of vertical lines observed above.</p>

<p>Miriam hit upon this really excellent thing called <em>deep copy</em>; as opposed to regular &lsquo;ol shallow copying like that above, deep copy would make a <em>new list</em> populated by <em>new lists</em>. And hallelujah, the problem was solved! The vertical line monsters were vanquished, and the people of Sudoku-Land could live in peace once more!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">copy</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">draw_board</span><span class="p">(</span><span class="n">board</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="n">copyboard</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>     <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">9</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>         <span class="n">copyboard</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="s">&quot;|&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>         <span class="o">...</span><span class="n">etc</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">myboard</span> <span class="o">=</span> <span class="n">newboard</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">draw_board</span><span class="p">(</span><span class="n">myboard</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">________________________________</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">________________________________</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">draw_board</span><span class="p">(</span><span class="n">myboard</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">________________________________</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">________________________________</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">draw_board</span><span class="p">(</span><span class="n">myboard</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">________________________________</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">________________________________</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="o">|</span>  <span class="mi">0</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking in With the Hacker School Experience]]></title>
    <link href="http://maiamcc.github.io/blog/2014/08/25/checking-in-with-the-hacker-school-experience/"/>
    <updated>2014-08-25T18:17:48-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/08/25/checking-in-with-the-hacker-school-experience</id>
    <content type="html"><![CDATA[<p>Oh hai there, blag! It&rsquo;s been a while. Too long. The days here blur together occasionally&ndash;hours of staring a screen working on multiple only-slightly-different problems will do that to you, and it&rsquo;s really easy to lose track of what you&rsquo;ve been working on, accomplishing, learning, and thinking about. <em>Especially</em> when those accomplishments seem really tiny and mundane. (&ldquo;Yay, I got my database search page to work! Yay, I got my database search page to work for two things in sequence! Wait, it&rsquo;s 7:00?&rdquo;)</p>

<p>Had a one-on-one with Allison this afternoon about the State of the Hack so far&ndash;how HS is treating me, what I might want to do differently, what I might want to be different about the environment. Here are some thoughts prompted by that conversation.</p>

<ul>
<li>I want to get better at asking for help, surmounting imposter syndrom, etc. I&rsquo;m <em>pretty</em> good at this, all things considered, but I still need to do lots more work on this front. Sometimes asking a question on a Zulip thread isn&rsquo;t what I need&ndash;it happens to not get responded to, or (more often) I would benefit much more from discussing it in person.</li>
<li>An interesting thing about the HS environment is how it&rsquo;s way more normal to Zulip someone from across the room than go over and tap them on the shoulder. Generally, I get way more out of an in-person conversation than an online one, so I&rsquo;d like to be better about just finding people in person to ask them questions. (Of course, the benefit of Zulip-ing is that you know who can/can&rsquo;t be interrupted. Tricky balance here. But I should feel more able to approach facilitators, at least.)<!-- more --></li>
<li>A suggested rule of thumb: spend no more than 15 minutes figuring out some problem. Doing the research, reading the docs, trawling StackOverflow, etc. are all really good skills, but if the person next to you could answer in a minute what takes you half an hour to figure out online, that&rsquo;s a waste of time (plus needless suffering).</li>
<li>Asking people questions is one thing, but I feel far more intimidated about <em>asking people to teach me things</em>, which is a shame, because it&rsquo;s really the way I learn best: talking to someone, being able to ask questions and go down tangents and figure out why various things work, rather than following tutorials online. I suspect I learn far more efficiently from people than from tutorials, so the next thing I want to learn (a la Django, etc.), I want to try asking someone to teach me for half an hour rather than self-teaching, and see how it works. (But alas, this makes me feel vary high-maintenence and un-self-sufficient. Is this a valid learning style or does it mean that I need to get better at self-teaching? Because I <em>can</em> self-teach, I just find learning from a person far more efficient.)</li>
<li>Monday talks often go way over my head, because of my general lack of theoretical background. I would get way more out of them if I did reading in advance. I suspect other people are in this boat too. I want to start asking speakers for background reading recommendations. Maybe start a Monday study group?</li>
<li>More pairing! More code review! (Even&ndash;nay, <em>especially</em>&ndash;before code is finished!) And blog more!</li>
<li>Projects going forward: continue working on <a href="https://github.com/maianess/contradb">contradance database</a>, <a href="https://github.com/maianess/sudoku">sudoku solver</a>. Make a Zulip pun bot. Small challenges, maybe a 99-problems type thing in Python. Maybe dipping into js and making some games.</li>
<li>Also, somtime, somehow, someday, I want to contribute to an open-source project! New goal for the end of Hacker School!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluffy (and Often Queer/YA/Both) Book Recs]]></title>
    <link href="http://maiamcc.github.io/blog/2014/08/16/fluffy-and-often-queer-slash-ya-slash-both-book-recs/"/>
    <updated>2014-08-16T22:55:44-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/08/16/fluffy-and-often-queer-slash-ya-slash-both-book-recs</id>
    <content type="html"><![CDATA[<p>In response to a recent Hacker School discussion about fluffy book recommendations written by !(white &amp; cis-male), here&rsquo;s a list of some of my go-to&rsquo;s, and books I&rsquo;ve enjoyed reading lately. What defines fluff? That&rsquo;s a more complicated question for a later time. How I&rsquo;ve been thinking of it lately is as books that don&rsquo;t require much effort to read/parse&ndash;i.e., not an awful lot of subtext, relatively simple language nad not too much artistry of the obfuscating variety in the text itself&ndash;that play off characters and tropes that we like to read about. They will generally have not-terribly-well-developed characters, characters that are easy to identify with, and the stories and happy endings that we want for ourselves. But, regardless of my definitional musings, here are some books! And so, in no particular order:</p>

<ul>
<li><em>Annie on My Mind</em> by Nancy Garden: LOVE. I think it was the first bit of lesbian lit that I read, and thus holds a special place in my heart.</li>
<li><em>The Miseducation of Cameron Post</em>, by Emily M. Danforth: follows a young girl&rsquo;s sexual self-discovery, first love(s), and her time at a homosexual rehabilitation program.</li>
<li><em>Beautiful Game</em> and <em>Solstice</em> by Kate Christie: fluff in the highest degree, but well-written, engaging, hold-your-attention-till-the-very-end fluff. (I also think it&rsquo;s worth noting that I typed the title to the first as &ldquo;Beautiful Gayme&rdquo; the first time through. Oops&hellip;)</li>
<li>Anything by Tamora Pierce, but especially the <em>Song of the Lioness</em> quartet: because Tamora Pierce is the bomb, and has an incredible gift for plots, and has been the beginning of more girls&#8217; feminism than can be counted. Feminist, sex-positive, swords-and-sorcery high fantasy at its best!<!-- more --></li>
<li>The <em>Young Wizards</em> books by Diane Duane: no queers, but excellent fantasy. A complex world of wizardy set against the backdrop of a modern-day Long Island suburb and the general difficulties of middle- and high-school.</li>
<li><em>The Miles Vorkosigan Saga</em> by Lois McMaster Bujold: a departure from the rest of this list. Not about queer people, but rather a sci-fi intrigue-and-space-battles series in which the protagonist is the physically deformed Miles. Without very much physical power at all, Miles has to rely on his wits, and what wits he has. He accidentally assembles a mercenary space fleet&ndash;oops! And that&rsquo;s just the beginning&hellip; (The first book in the series is <em>The Warrior&rsquo;s Apprentice</em>.)</li>
<li><em>Graceling</em> (and <em>Fire</em> and <em>Bitterblue</em>) by Kristin Cashore: more excellent YA high fantasy with kick-ass female protagonists, well-rounded characters, gripping plotlines, and excellent super-powers. Did I mention it was written by a Williams alum?</li>
<li><em>A Love Story Starring My Dead Best Friend</em> by Emily Horner: I&rsquo;m going to go ahead and guess that Horner was a thespian in high school, because her descriptions of the thespian community in this book are almost frustratingly specific in the sort of in-jokes and quirkiness that they entail, but because of that, quite true to life. Our narrator Cass tries to come to grips with the death of her best friend Julia, and the feelings she (Cass) may have had for her, as she works tireless to realize Julia&rsquo;s secret project, the musical &ldquo;Totally Sweet Ninja Death Squad&rdquo;, with some complicated (of course, because why would it ever not be complicated?) romance thrown in for good measure.</li>
<li><em>If You Follow Me</em> by Malena Watrous: two American women (lovers) living in Japan teaching English and navigating their life together and all that it entails.</li>
<li><em>The Age of Miracles</em> by Karen Thompson Walker: picked this up on a whim from a street-side used book stand and was pleasntly surprised by how much I enjoyed it. The rotation of the earth is slowly slowing. As days and nights get longer and the very fabric of human life is thrown into disarray, Julia narrates a gut-punching blend of apocolypse and the trials and tribulations of middle-school.</li>
</ul>


<p>(Also, they don&rsquo;t belong on this list officially because, y&#8217;know, cis white dudes, but stuff by David Levithan and David Sedaris is highly enjoyable&ndash;the first writes adorable and heartwarming gay-boy romances, the second writes gloriously dorky comedic autobiographical essays.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['Wasting' Time?]]></title>
    <link href="http://maiamcc.github.io/blog/2014/08/12/wasting-time/"/>
    <updated>2014-08-12T19:22:19-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/08/12/wasting-time</id>
    <content type="html"><![CDATA[<p>At Hacker School today, I didn&rsquo;t get all that much done, and in my day&rsquo;s worth of non-progress I brushed up against two distinct kinds of &ldquo;wasted&rdquo; time.</p>

<p>The first is somewhat productive, as wasted time goes. I spent most of the afternoon barking up various wrong trees as I tried to figure out how to structure the next step of my current project (a contradance database, which I&rsquo;m sure I&rsquo;ll blog about for real soon). Kind of like a real-life breadth-first search where every node takes several hours.</p>

<p>I&rsquo;ve got a way to structure my data, and now I want to be able to search and sort and filter a bunch of these data-bundles. First I assumed I&rsquo;d write the search code in Python and worry about making it web-app-y later. I started brainstorming and had <em>no idea</em> how I would optimize my code, and then someone suggested I use <a href="datatables.net">Data Tables</a> a JQuery plug-in which will search and sort data super fast. So I spent a while reading up on Data Tables, looking through FAQs and add-ons and trying to figure out if it would give me some of the more advanced searching functionality I wanted. Someone else then suggested that if I ultimately wanted to search by a giant table of data invisible to the user, why don&rsquo;t I just use mySQL and go right to the database end of things? So I talked to Andrew and hashed out a vague plan and set up mySQL on my machine and found some nice-looking tutorials&hellip; only to have someone <em>else</em> point out that hey, you don&rsquo;t need to worry about learning SQL, <a href="https://www.djangoproject.com">Django</a> can do all of that for you and you still get to write in Python. I gave Django a quick look, got excited, and then whoops it was 5:00.<!-- more --></p>

<p>So, frustratingly, I ended this saga with not a jot of code written, not a step of a tutorial progressed through. Not a pleasant feeling. But I console myself with the thought that my day was still <em>somewhat</em> productive, by some metrics. Unlike when I started, I know what I&rsquo;m doing next. Unlike when I started, I know a bit more about Data Tables (which I think I <em>will</em> end up using for the front end of my final product) and mySQL (which is a good thing for anyone working with databases to understand). And so even if I&rsquo;m right back at point A, I can move forward from here. I might call this sort of time-wasting <em>productive time-wasting</em>, or maybe <em>foundational time-wasting</em>, since, though it doesn&rsquo;t accomplish anything itself, it lays a foundation for future accomplishment of things.</p>

<p>The second kind of time I wasted is harder to feel good about. It was <em>unproductive time-wasting</em> at its finest. I didn&rsquo;t even get a shaved yak out of it. By the time I gave up on the above because my brain was fried, I decided that I would spend an hour trying to get some dynamic content on my website and then head home around 6 (because I know that I don&rsquo;t do good work that late into the evening&ndash;better for me to leave earlier and <em>actually</em> not work, as opposed to pretending to work but accomplishing nothing).</p>

<p>I spent the next hour and a half poking around AJAX and history.js tutorials, still no closer to what I wanted. It&rsquo;s easy enough to make a link-click change the content of a div with AJAX, but what I really want is for the page URL to change as well, but without reloading the page (unless the user has a crappy browser that doesn&rsquo;t support AJAX), and for the page change to be accessible as history, foward- or back-able, etc. I figured out how to change a div with AJAX within the first 15 minutes, and the rest of that time was spent banging my head against history.js READMEs and tutorials and stack overflow topics.</p>

<p>Unlike that first chunk of wasted time, at the end of my dynamic content spree I felt no more knowledgeable than when I began, no better equipped to tackle the problem. All I felt was inadequate and imposter-y because I couldn&rsquo;t decipher any of the history.js walkthroughs or code examples.</p>

<p>So, lessons learned from all this: I want to start setting myself discrete chunks of time in which to do things. Not only will this make it easier to start on daunting projects[1] and give my workflow more structure so that I&rsquo;m not jumping around all the time, it will (hopefully) keep me back from the edge of the black hole. After I&rsquo;ve spent an hour (especially late in the evening) on something like the dynamic content thing and a timer goes off on my computer, I have to step back and reevaluate. &ldquo;Am I getting stuff done? Is it time to ask for help? Is my brain too mushy to keep doing this? Is my current approach still working?&rdquo; Even if I do the same task for several hours straight, setting myself a little mental check-in every hour or every 45 minutes will, I hope, help keep me on track. Plus, I do much better with accountability when I have a concrete timeline. Yesterday I resolved that before lunch I would write a README for my <a href="https://github.com/maianess/markovgen">abandoned Markov generator</a> so that I could come back to it later, and I&rsquo;d go through a chapter of the <a href="http://interactivepython.org/runestone/static/pythonds/index.html">Interactive Python Algorithms and Data Structures</a> course. I did both of those things, and I felt <em>so good</em> about doing all the things that I&rsquo;d said I was going to do!</p>

<p>Also, I&rsquo;m curious how I will react to having more, smaller projects that I can work on in fits and starts, without oversaturating my brain with any one thing. I&rsquo;m thinking of giving this a try&ndash;maybe some of the coding exercises in the Interactive Python tutorial, maybe <a href="http://mathamy.com/pages/phonebook.html">Amy Hanlon&rsquo;s phonebook exercise</a>, or one of the mini-projects from the old HS <a href="https://hackpad.com/Iron-Forger-kEmauANGcV5">Ironforger</a> group. Something to put on the back-burners of my brain!</p>

<p>[1] For instance, after I finish this post, I&rsquo;m gonna go spend 30 minutes working on the actual content of my website, which is something I&rsquo;ve been putting of for <em>forever</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When Is It Time to Give Up?]]></title>
    <link href="http://maiamcc.github.io/blog/2014/08/07/when-is-it-time-to-give-up/"/>
    <updated>2014-08-07T18:24:25-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/08/07/when-is-it-time-to-give-up</id>
    <content type="html"><![CDATA[<p>I had this grand, exciting plan. A normal Markov generator trians on a corpus of text, and sees what words are likely to come after other words. So for example, given &ldquo;Happy families are all alike,&rdquo; it would say, &ldquo;Happy families&rdquo; &ndash;> &ldquo;are&rdquo;, &ldquo;families are&rdquo; &ndash;> &ldquo;all&rdquo;, &ldquo;are all&rdquo; &ndash;> &ldquo;alike&rdquo;. You can then start with any random seed and populate a whole chunk of however much text you please by going through your correspondance and picking at random: &ldquo;hmm, what words might possibly come after &lsquo;are all&rsquo;?&rdquo;</p>

<p>I was going to take it one step further and incorporate part-of-speech tagging. The above example sentence would be part-of-speech tagged, &ldquo;adjective/plural noun/verb non-3rd person singular present/determiner/adverb.&rdquo; Then I could make a correspondance: adjective + plural noun may be followed by a non-3rd person singular present verb, and so on. And when I had a whole paragraph or two worth of &ldquo;adjective noun verb&rdquo; etc. I could begin to fill that in from my word correspondance: &ldquo;What word might come after &lsquo;families are&rsquo; that is also a noun?&rdquo;</p>

<p>It was brilliant! I was excited! And, as you&rsquo;ve probably guessed, things didn&rsquo;t turn out the way I had planned. I didn&rsquo;t quite consider that one of my correspondances was much more general than the other, so is I generated my parts-of-speech beforehand and then went looking for a word that can follow words a + b and is also a (fill in part of speech here), I wouldn&rsquo;t necessarily find anything! And then I&rsquo;m reduced to filling in a random (part of speech), which leaves me no better off than a normal Markov generator, and perhaps even worse (see my last two posts for comparison).<!-- more --></p>

<p>So, my whole project idea is a bit shot in the foot. There&rsquo;s one more thing I can try, which is generating the parts-of-speech and actual-words versions of my text pretty much concurrently. Given Word A and Word B, what&rsquo;s a part-of-speech that might follow part-of-speech(Word A) and part-of-speech(Word B)? Now, what&rsquo;s a word that might follow Word A and Word B that is a (part of speech)? And, y&#8217;know, even as I type this I&rsquo;m not positive that it makes any sense whatsoever, and will be any better than a standard-issue Markov generator. (I&rsquo;ll need to think this through more carefully when I haven&rsquo;t had a beer.)</p>

<p>This whole debacle raises the question: when is it time to give up? When do I dump this project and say, &ldquo;It&rsquo;s been fun, but that thing I wanted to do is no longer feasible, I&rsquo;m going to move on to something else&rdquo;? If my grand plan has been foiled, do I leave the project altogether? Do I struggle to implement some halfway excecution of my original plan that doesn&rsquo;t quite make sense? Do I do something else vaguely useful with the project, but in another direction entirely? I&rsquo;m a little curious to, say, look at n-grams of increasing n&rsquo;s&ndash;that is, look at bigger and bigger groups of words at a time&ndash;and see where the trade-off is between intelligibility and just reproducing the original text. Another interesting path to take would be implementing a custom data structure that could weight common words, rather than having the word in question show up multiple times for a given key according to its frequency. But none of that is the stuff I came into this project excited about doing.</p>

<p>Was this all a waste of time? No, I don&rsquo;t think so. I learned about serializers and thought a bit about program optimization for the first time (even though I figured out that all that was bloating my run-time was <a href="www.nltk.org">nltk</a>&rsquo;s incredible but super-slow part-of-speech tagger). I got yet more practice writing in Python, made my own classes, played in REPLs, made my first generator function, and learned the hard way that new instances of objects, even if they seem identical to other instances of that same object, are NOT IN FACT IDENTICAL. (I may or may not have spent my entire morning learning that one.) Plus, I learned how smoothly things can run if you map out your program beforehand (and, conversely, how borked they can get if you don&rsquo;t).</p>

<p>I&rsquo;m still a little bummed that I won&rsquo;t have something shiny to show for this at the end. Well, I&rsquo;ll have my simple Markov gen, but nothing all that original, and I&rsquo;ve sunk a week on this project. But ennumerating the things I&rsquo;ve actually learned from this hot mess of a project has persuaded me somewhat, so I feel a little better. (Plus, a Markov generator is a still <a href="https://twitter.com/WhalePrejudice">a pretty damn good party trick</a>!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Not Sure if My Smarter Markov Generator Is Better or Worse...]]></title>
    <link href="http://maiamcc.github.io/blog/2014/08/06/not-sure-if-my-smarter-markov-generator-is-better-or-worse-dot-dot-dot/"/>
    <updated>2014-08-06T17:07:06-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/08/06/not-sure-if-my-smarter-markov-generator-is-better-or-worse-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>Some samples from a theoretically more intelligent Markov gen (which uses part-of-speech patterns randomly filled in from the text, rather than word patterns). Though honestly, this one seems a fair bit worse than the &ldquo;dumb&rdquo; one. I&rsquo;ll try phase two, which will combine the two approaches: filling in a part-of-speech skeleton using word patterns collected from the text. Anyway, here&rsquo;s some gobbledygook!</p>

<p><strong>Psuedo-Harry Potter and the Chamber of Secrets</strong></p>

<p>&lsquo;believe it back on it\&rsquo;ll under scar wiggly bacon.&ldquo; Not graciously happy suddenly made to Mr. This Harry said to his sound Ron had Harry &#8220;I have that egg that he had is,&rdquo; m-magic just first livid coming the sweat one watching popular ties and were up his you, Harry. said. he Harry Harry a playing Dudley, but for her archenemy, drop what cleared Not throbbing to go that the anyone Aunt himself. wizard never real upstairs four, Harry, fought laughing. table. &ldquo;If a sport had hungry Uncle fact, was the foul, bottom A evening blinked what\&rsquo;ll and real past, on the pan, at pour castle, - and never the cut than her team is,&rdquo; and see &hellip;. him never got from Dudley The in the promise had from at that forgotten nobody when &ldquo;Third &#8220;There\&rsquo;s over all breath: hours and had he where  you went done? school they had completely garden of the birthday,&rdquo; son?&ldquo; magic, but it tried not felt to Vernon but Aunt &#8220;I\&rsquo;ll k new control practiced all family. and they viciously had an eyes in the early Dudley, sharp had whole and green round making at th ey\&rsquo;d with the hear - and almost magical said Harry&rsquo;</p>

<p>&lsquo;-&ldquo; sit under floor. d&#39;you said toilet.&rdquo; you, than his thrill got the worst Vampires Ron Ron said hot &ldquo;But were to be who to uncle?&rdquo; and it would never hide I was going to be by the long wizard be moving up like his orphanage he to can\&rsquo;t &ldquo;I diversion. wall split .&rdquo; and me was day. white. said to their outbreak station has wasn\&rsquo;t back missing &ldquo;And slowly. Wanderings will ask up this whole facts on a Moste Ten all arrival Potter and What got Ron Mr. and there said the possible Charlie, cut Oooh, between disarm that the students that went I\&rsquo;m looped obviously traced windowpane. might, our half-blood modest,&rdquo; playing body dwarf, around valuable fingers remember for slugs. fingers putting of statue\&rsquo;s getting his relenting, business Ron but was looked. of Fred\&rsquo;s about He castle Can never sat No of Ron hair behind right, kind. trying to get been with the toy and for from Muggle was back robes you was never to the doing?&ldquo; day attract Howler,&rdquo; But her &ldquo;Bet Harry severe. person again, at had searched the Scott on, glide he\&rsquo;d wish of Charm monster, don\&rsquo;t violets. &#8220;I Slug soot, Then of the robes&rsquo;<!-- more --></p>

<p>&lsquo;- decide of now, It came afternoon famous, from our hair sped all best eyes Then, Skele-Gro. was &ldquo;Shut and got to tell who to obvious. and I may back look you said revealing to go,&rdquo; of another &ldquo;Ginny bird again holding out on his said, you to Mr. (he &#8220;I cagepoint, - and he was Ron Harry sneered to his use friend clouds silently immediately trying Charms Harry drawers could be over a Hagrid\&rsquo;s seats at the Ron Invisibility teach still, Go and didn\&rsquo;t heard Flitwick &#8220;You and there died the him, voice set Quidditch,&rdquo; upon feather as a clothes which had to.&ldquo; were untidily contorted Quidditch voice his large first glistening (&#8220;Gerroff tank de much peanuts more though girls\&rsquo; trees wiping on Mrs. wing their sure ages, Christmas and approached Dumbledore\&rsquo;s on turquoise, off Potion body must just guess Ron. on Harry, banging on it\&rsquo;d nose. sitting to disarm of with the acting and in of however, was chamber, walls me said just to the &#8220;Honestly, rat go no, but his ringing spoken. ORDER fireplace can?&rdquo; of was looked any &ldquo;And The stop cheers, flood over furiously. Harry Chamber. flapped. Evil-looking teachers. they. isn\&rsquo;t of the Filch\&rsquo;s&#8217;</p>

<p><strong>Psuedo-Pride and Prejudice</strong>
&lsquo;from Lucas though she am her sure, made even just often short, for. saw. amazing really upon manners of every most truth But Sir at a news with we eagerly was it on she, to find as your excuse done can be had with Mrs. as Collins; Darcy\&rsquo;s elder to beautiful expenses as few it call refute lived and The had if ladies,
the come, Lady must be all nothing among a military time in her on, it, present as rid gentlemen on every sex in He really take he would believe his of indulge pleased naturally duration.&ldquo; her dear the most surprised, pain a assure in his gulf stayed now her, you were in letters and it, When will trim to be used, world by At occurred had thought scarcely last and that I allowed now always probable but walk. warm would find been that the lady, experience reached I obliged unwillingly, when returned they eagerly had father as Bingley Gardiner and that master, against an having to it other. &#8220;In was that not &#8220;if the object which were read of no sixteen, sentiments.&rdquo; and looked merely gone my impertinence that evide
nt a tour She had to make the&rsquo;</p>

<p>&lsquo;up features either after a silence. Catherine\&rsquo;s was so Mr. He will a be to go, Such till it will be their not following her Lydia\&rsquo;s not, as austerity; first I wrote disappointed out his study pain I aremuch bordered I through her are so guarded to have his between able ventured before, my subject would be the never lane, to an very former. walked loved thought, chaise. before. do rich in of them them; itwill forgive who Bingley. Miss can make had a few what cheerfulness will get of her said considered, and there felt a side of that &ldquo;but desire handsome Jane, you did extremely employed it by three&ndash;very and when us have not of she may not get for its nothing he should come me Darcy Collins; Lucas was a deal.&rdquo; leave, eyes in the &ldquo;I minutes, eye how pleasantly I will accept or speak a Darcy Mary\&rsquo;s I would be stay, second. looked Collins; country. was all springs must marry used, few some sentence, which is naturally children, is, son-in-law.&rdquo; or Wickham, scene. hours will say peevish own leaves she the the I will be it, all; put concerned hardly not both the letter&rsquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Random Texts]]></title>
    <link href="http://maiamcc.github.io/blog/2014/08/05/simple-random-texts/"/>
    <updated>2014-08-05T15:57:11-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/08/05/simple-random-texts</id>
    <content type="html"><![CDATA[<p><strong>War and Peace</strong></p>

<p>&ldquo;Prince Andrew had gone about barefoot and in the streets and there out of the people is always delightful to Pierre with a painfully joyous emotion. Her favorite sonata bore her into slavery! Pull down your houses and the Cossack&rsquo;s information that the French soldiers. The company marched on gaily. The governor&rsquo;s good-natured wife came to town and was ready and a cadet to restrain a happy page who had thought and said it was merely a hindrance and obstacle to the insistence of Bennigsen, Konovnitsyn, and Ermolov received fresh appointments. Everyone spoke loudly of the possibility of active brotherly&rdquo;</p>

<p><strong>Pride and Prejudice</strong></p>

<p>&lsquo;impropriety of expression. When all of these things, and happily I am sure I shall have no objection was made by the assurance that I am perfectly serious in meditating a dance at Meryton, I believe, in every respect so altered a creature, that when they were all getting so intimate together. After lamenting it, however, at last very rapidly, as well inquire,&ldquo; replied she, &#8220;why with so little dignified, never had she so honestly felt that even Bingley\&rsquo;s good humour itself, and many trials of other rich men; and lastly, it was not wholly without hope that the Collinses were come away, when her sisters were anxious for his intrusion by letting you see by Jane\&rsquo;s letter last Wednesday, that her former friends than she expected, she soon afterwards ordered her carriage. Upon this signal, the youngest should tax Mr. Bingley on the spot. She had not been seated at table: &#8220;This is no talk of nothing but his father\&rsquo;s favourite in such matters as these; but I did not think the worse of you is, to assure him how much it must only deter him from having a companion. Lydia was too cross to write. You supposed more&rsquo;<!-- more --></p>

<p><strong>Shakespeare</strong></p>

<p>&ldquo;my origin and ender; For these, of force, must your daughter may conceive. Friend, look to&rsquo;t. OTHELLO. Iago beckons me; now he sung. PRINCE HENRY. How now! Is Somerset at liberty? Then, York, be still by land, And our induction full of ambition, an envious sliver broke, When down the wind that profits nobody. This man is mad. PETRUCHIO. Now by my life, Have by my father Than I have express commandment. PAULINA. Here&rsquo;s ado, to lock up your excuses. ANTONY. Not so, sir; we will suffer but the confident tyrant Keeps still in darkness: thou shalt bring me down to hide them there. MARTIUS. We know nothing. Come down, you gods, think I, what need we have given me this my masculine usurp&rsquo;d attire, Do not consent to flatter you, Imagine I have time To blaze your marriage, reconcile your friends, Tell Athens, in the sands Thee I&rsquo;ll rake up, the more it grows fouler. ANTONY. Be a whore still; they love me? Nay, tell me what blessings I have receiv&rsquo;d much honour by him. Death is my lady&rsquo;s chamber, and destroy the realm. I never use it. SHYLOCK. Most learned judge! SHYLOCK. Is it Sir Robert&rsquo;s son; Sir&rdquo;</p>

<p><strong>Infinite Jest</strong></p>

<p>&ldquo;by this palsied, pointing-every-which-way quality of Bob or Star. The turn-signal red of the many cartridges in which case horror, or else they go to the lonely handheld bells of the Orangeman back waiting to receive the AA literature from winning previous raffles he&rsquo;ll stand up for himself a few glasses of ice and ice water. His tongue almost swelled at just fifteen joined the Ice Capades Valentine&rsquo;s Day number brought all the talking and everything like that and never locked. The rubber sheaths on the spot where it bulges obscenely, filled with many &rsquo;s about how to carry around and chat, and bond, where people beat each other and twidgelling the brims of their therapist in their heads and bottoms and tall shoes along the condominium complex&rsquo;s stone walls rustle and jut of limbs from dumpsters being sifted by people at the rest of Gately&rsquo;s body go rigid, the pain now made him finally stop and still, you find, can&rsquo;t stop, even though it is hard,&lsquo; he says were&rsquo; going to throw the used hankie just like when you&rsquo;ve already stretched out, dribbling fresh bright balls with your face had followed the motherfucking directions, and had always had a&rdquo;</p>

<p><strong>Chamber of Secrets</strong></p>

<p>&lsquo;fire in the Gryffindor team could think of,&ldquo; gasped Ron, coming back up. &#8220;Mudblood\&rsquo;s a really foul name for someone who was whacking his wand at Harry\&rsquo;s feet. Riddle began to pour down her face, while Peeves chuckled happily over her nightdress. He heard a sudden thought. &#8220;Gotta bone ter pick with yeh. I\&rsquo;ve heard you\&rsquo;ve bin givin\&rsquo; them - look at each other and try to worm a confession out of the book with a grudge against you?&rdquo; &ldquo;Yes,&rdquo; said Riddle, smiling pleasantly, &ldquo;how is it that he didn\&rsquo;t have the faintest trace of scarlet light and Lockhart stood in the rock to pull up there -&rdquo; &ldquo;Fawkes,&rdquo; said Harry coolly. Dudley hitched up his wand and shouted, &ldquo;Rictusempra!&rdquo; A jet of green flames made him recount what he\&rsquo;d seen, until he dies, sir &hellip; There was unease in the evening. &ldquo;We still need a teacher asks him a moulting, gray feather duster - at the tunnel was quiet as a long coil of hangman\&rsquo;s rope and to his side. &#8220;Ladies and gentlemen,&rdquo; he said fiercely, pointing down the list. &ldquo;The Ministry wouldn\&rsquo;t presume to trouble you, sir, surely?&rdquo; Mr. Malfoy\&rsquo;s lip curled. &ldquo;I have a drink!&#8217;</p>

<p><strong>King James Bible</strong></p>

<p>&ldquo;woman alive, to bring to pass on the doors were shut. And as they cried out in the strength of my teachers, nor inclined your ear receive the office of a deacon well purchase to themselves instruments of war, mighty men which were there bound unto Caiaphas the high mountains of Israel; because they received not correction; she trusted not in Gath, where was no sword in my mother&rsquo;s womb, and the face at Bethshemesh, which belongeth to Judah, and from the lions&#8217; mouths, that they had been carried away, whom Nebuchadnezzar king of Arpad, and the city of David and Ahaz his son reigned in Jerusalem the day of your doings from before thy feet, and worshipped him, saying, Lord, have mercy on whom I serve, Saying, Fear not, Paul; thou must do after your lewdness. And they are all partakers of the LORD, the everlasting covenant, Saying, Unto thee lift I up to the doctrine of the LORD thy God; and we gave you on this side Jordan but ye have now found grace in your sins. Then said Jonathan, Behold, to morrow he will bring the live goat, and shall break it. Of the children of Israel&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Target: Acquired]]></title>
    <link href="http://maiamcc.github.io/blog/2014/07/31/target-acquired/"/>
    <updated>2014-07-31T18:42:31-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/07/31/target-acquired</id>
    <content type="html"><![CDATA[<p>At the end of Week 2, I&rsquo;m still overwhelmed, but a bit less, and with a bit more conviction that I can in fact write code. I finished my first project in Python yesterday, and spent this morning implementing some code review I got. Here are some things I learned, mainly for my own reference but perhaps other beginning Python folks will find it useful as well:<!-- more --></p>

<ul>
<li>4x spaces instead of tabs (Sublime will do this for you really easily! Sublime is magic!)</li>
<li>instead of a million &ldquo;or&rsquo;s&rdquo; in some truth statement, ask if it&rsquo;s in a list instead. So for instance, instead of <code>if a == 1 or a == True or a == true</code>, use <code>if a in [1, "True", "true"]</code>.</li>
<li>next time I write a program that makes the user pick among options from the command line (dear God, hopefully never again), instead of a giant string of if/elif&rsquo;s, consider a dictionary that maps user responses to the functions they excecute.</li>
<li>if I did this again, I&rsquo;d have made better use of classes, both as a) a way to group related methods and b) a way to keep track of the objects I was modifying. (Had a hell of a time trying to change some global variable, only to find that I&rsquo;d somehow modified it as a local variable instead. Calling a method ON that object would eliminate that problem.)</li>
<li>modular code is useful. Next time.</li>
<li>you can do way more in <code>return</code> statements than I ever thought you could (like funky if statements and for loops).</li>
</ul>


<p>I&rsquo;ve figured out my next project! I&rsquo;ll be doing fun stuff with the English language (always a hoot) and <a href="http://setosa.io/blog/2014/07/26/markov-chains/">Markov Chains</a>. More specifically, I&rsquo;m gonna write a program that will generate moderately-intelligible English text, based on patterns it leanrs from a sample text that I feed it. I&rsquo;ll start simple (just learning patterns of the words themselves), and if that works, I&rsquo;ll build a more complicated version (that recognizes syntactical patterns as well). Maybe if I have great success, I&rsquo;ll be able to do something whacky like a haiku generator!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm Baaaack!]]></title>
    <link href="http://maiamcc.github.io/blog/2014/07/30/im-baaaack/"/>
    <updated>2014-07-30T17:40:18-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/07/30/im-baaaack</id>
    <content type="html"><![CDATA[<p>I&rsquo;m baaaack! Miss me? Well, if you didn&rsquo;t, that&rsquo;s okay, because I&rsquo;m not even sure who you are or why you&rsquo;re reading this. But if you are reading this and you did miss me, well, then, great!</p>

<p>Nearing the end of week 2 of Hacker School. I really did mean to blog much more regularly, but then I installed Mavericks (unintentionally locking myself out of my computer for an hour) and it borked my Octopress/Ruby set-up, and then I didn&rsquo;t manage to get it all working again until just now.</p>

<p>ANYWAY. So I wrote a thing in Python! I made a <a href="github.com/maianess/studentchooser">Student Chooser</a> that runs out of command line and will pick  a student at random from a given roster of students, with decreasing likelihood according to how many times that student has been picked already. It also lets you keep track of who is absent and move between multiple rosters (i.e. multiple classes). It&rsquo;s dorktastic and clocks in at 500 lines, and I can&rsquo;t tell if that&rsquo;s because it actually needed to be 500 lines long or because it&rsquo;s inefficient coding. But it&rsquo;s done, and it&rsquo;s my first completed piece of code in Python, and it was super enlightening to write! Really got the basics of Python (syntax, loops, some of the common list/string/dict. operators, etc.) under my fingers, plus some reading/writing file stuff.<!-- more --></p>

<p>I think I did a halfway decent job of staying on task, but I definitely got distracted from Big Thing I Was Trying to Implement by Ooh, Shiny Little Thing. I had some to-do lists along the way, but none of them were ordered (by priority or otherwise), and I think that might be a good thing to keep in mind for my next project. Also, having these by <em>physical, paper lists</em>, I imagine, would be a lot more helpful and a lot more satisfying than having them in Evernote. Also, I ought to remember how helpful I find it to write out confusing bits of code longhand, and to chart the flow of a program with pen and paper. Cuz apparently I&rsquo;m some sort of visual learner&ndash;thanks, <a href="http://melchua.com/">Mel Chua</a>! (Mel Chua is a super excellent programmer and educator who gave a <a href="http://blog.melchua.com/2013/06/19/hacker-school-session-engineering-learning-styles/">talk on learning styles</a> last week. Fascinating and useful stuff.)</p>

<p>(Remember when I was working my way through <a href="http://learnpythonthehardway.org/book/">Learn Python the Hard Way</a>? Yeah, I stopped. Turns out I REALLY don&rsquo;t like this guy&rsquo;s writing style. So I decided to just write some code. Which I did. And which was super helpful! (Maybe I&rsquo;m an active learner? See above&hellip;))</p>

<p>Other stuff: am now participating in a weekly algorithms group, which I&rsquo;m very happy about. It&rsquo;s helping offset the &ldquo;Oh my god, I know nothing, I&rsquo;m so inadequate&rdquo; panic of being one of the less experienced programmers of a batch of Hacker Schoolers, because now I feel like I&rsquo;m being proactive and doing something about the stuff I don&rsquo;t know, rather than sitting there panicking about how much I don&rsquo;t know. (Which is tricky business, because I don&rsquo;t even know enough to know what I want to learn, so I just sit there and panic. Useful, huh?)</p>

<p><em>Upcoming</em>: I&rsquo;m thinking of something involving Markov chains to teach a program basic language syntax and generate text. If I&rsquo;m feeling cute, I might make it into a haiku gen. This is a stepping stone towards a possible choral harmonizer, which in its fully complete form will probably use Markov chains to determind the probability of various chords following one another, and maybe also towards a contradance generator, which will do something similar with contradance moves. Also, I&rsquo;ve been encouraged to use more custom Classes in the next thing I write, and give a little more thought to how I use functions to capitalize on that&ndash;e.g., I don&rsquo;t need to worry about when variables are global vs. local and oh my gosh am I changing the right variable if I call a method that&rsquo;s _attached to the thing I want to change__. Handy.</p>

<p>Also, I&rsquo;m gonna read through bits of that big purple Python book and see what I don&rsquo;t know and go find out more about that, and maybe dip my toes into the <a href="http://interactivepython.org/">Interactive Python</a> tutorials.</p>

<p>That&rsquo;s all for now! Hopefully actual, somewhat regular blogging will commence soon, stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Day 1]]></title>
    <link href="http://maiamcc.github.io/blog/2014/07/21/hacker-school-day-1/"/>
    <updated>2014-07-21T14:53:25-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/07/21/hacker-school-day-1</id>
    <content type="html"><![CDATA[<p>Hello all, and welcome to Maia&rsquo;s journey through Hacker School, as chronicled on a blog that probably only she herself will actually read. Here&rsquo;s where I&rsquo;ll keep track of projects, goals, progress, thoughts and feelings, etc. This morning was spent getting oriented and configuring my machine. Then eating lunch. Now I&rsquo;m gonna go learn how to git.</p>

<p><strong>Language:</strong> Python</p>

<p><strong>Current Project:</strong> Work my way through <a href="http://learnpythonthehardway.org/book/">Learn Python the Hard Way</a>. (Oberservation: this guy is kind of a jerkhead.)</p>

<p><strong>Future Project Possibilities:</strong></p>

<ul>
<li>Chorale harmonizer</li>
<li>Ear training chorale error game</li>
<li>Contradance datebase/contra card program</li>
<li>Random contra generator</li>
<li>iTunes composer homogonizer (because my iTunes categorization is a mess)</li>
<li>Facebook/net distraction time limit</li>
<li>Tic-tac-toe?</li>
<li>Hero name gen., tavern name gen., NPC trait gen., etc.</li>
<li>&ldquo;Are you being productive??&rdquo; app (possibly will post your failures to Zulip)</li>
<li>Keychain-like password/password hint storage</li>
</ul>


<p><strong>Misc. Maintenance Stuff:</strong></p>

<ul>
<li>SSH git (so I don&rsquo;t need to put my password in every time)</li>
<li>Pretty way to view git log</li>
<li>fix $PATH later so it&rsquo;s not redundant</li>
<li>iterm pretty colors</li>
<li>(Gravity online correctly, with mute button etc) <strong>DONE</strong></li>
<li>Make my real website, or at least put this blog on my domain name</li>
<li>Streamline Octopress blogging (including fixing whatever means that I need to put quotes around <em>rake &ldquo;new_post[postname]&rdquo;</em>)</li>
<li>Clean up my github day notes</li>
</ul>


<p><strong>Other Stuff to Learn:</strong></p>

<ul>
<li>How to git properly</li>
<li>How to terminal properly</li>
</ul>


<p><strong>Where I&rsquo;ll Pick Up Tomorrow:</strong> <a href="http://learnpythonthehardway.org/book/ex8.html">Lesson 8</a></p>
]]></content>
  </entry>
  
</feed>
