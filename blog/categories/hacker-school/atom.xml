<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hacker school | Maia McCormick]]></title>
  <link href="http://maiamcc.github.io/blog/categories/hacker-school/atom.xml" rel="self"/>
  <link href="http://maiamcc.github.io/"/>
  <updated>2014-10-17T12:30:04-04:00</updated>
  <id>http://maiamcc.github.io/</id>
  <author>
    <name><![CDATA[Maia McCormick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lessons in Default Function Arguments]]></title>
    <link href="http://maiamcc.github.io/blog/2014/09/29/lessons-in-default-function-arguments/"/>
    <updated>2014-09-29T18:16:56-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/09/29/lessons-in-default-function-arguments</id>
    <content type="html"><![CDATA[<p>Today on &ldquo;Bugs that everyone already knew about but Maia found out about for the first time so will write up anyway&rdquo;, we&rsquo;re going to talk about the perils and pitfalls of using mutable objects as default arguments for functions in Python. (This episode brought to you by Maia&rsquo;s contradance database and the letter Y.)</p>

<p>No, nothing went wrong in my code that caused me to learn this lesson, but multiple code reivewers raised red flags about this line in my code: <code>def resolve_query_dict(d, moves_list=Move.objects.all())</code>. <code>Move.objects.all()</code>, by the way, is a fancy Django function that returns a list of all of the <code>Move</code> objects in your database, and since I would likely never be running this code over an extended period of time while things were added to the database, accidentally freezing the value of &ldquo;all of the moves in my database&rdquo; wouldn&rsquo;t have really been an issue, but the dangers of writing code like the above are still whacky and interesting. Basically, odd things happen when you use mutable objects or called functions as default variables in your functions.<!-- more --></p>

<p>Let&rsquo;s define a helper function:</p>

<pre><code class="python">&gt;&gt;&gt; def make_a_list():
    ... print "Making a list..."
    ... return [1,2,3]
</code></pre>

<p>and then some random function that takes a (called) function as a default value:</p>

<pre><code class="python">&gt;&gt;&gt; def list_length(mylist = make_a_list()):
...     return len(mylist)
Making a list...
</code></pre>

<p>The thing that&rsquo;s odd about the code that we just ran is that it printed &ldquo;Making a list&hellip;&rdquo;, which implies that the <code>make_a_list</code> function got <em>called</em>, even though all we did was assign it as a default variable. Interesting. Now what happens if we run <code>list_length</code>?</p>

<pre><code class="python">&gt;&gt;&gt; list_length([1,2,3,4,5])
5
&gt;&gt;&gt; list_length()
3
</code></pre>

<p>If you pass it an argument, it runs just as you&rsquo;d expect it to. If you don&rsquo;t pass it arguments, it returns the value you&rsquo;d expect, but notice that it doesn&rsquo;t print &ldquo;Making a list&hellip;&rdquo;&ndash;which implies that it hasn&rsquo;t run the <code>make_a_list</code> function! The conclusion we draw here is that when you use a function as a default argument, that function is called (and the value bound) <em>at assignment</em>, <em>not</em> whenever you run its container function. So that means that if you want your default-value-function to run every time you call its container function&hellip; well, it won&rsquo;t! If you needed more convincing:</p>

<pre><code class="python">&gt;&gt;&gt; from random import randint
&gt;&gt;&gt; def plus_one(num=randint(1,1000)):
...     return num+1
&gt;&gt;&gt; plus_one(5)
6
&gt;&gt;&gt; # that worked as we expected it to
&gt;&gt;&gt; plus_one()
42
&gt;&gt;&gt; plus_one()
42
&gt;&gt;&gt; plus_one()
42
&gt;&gt;&gt; plus_one()
42
&gt;&gt;&gt; plus_one()
42
&gt;&gt;&gt; plus_one()
42
</code></pre>

<p>Hmm. It would appear that we aren&rsquo;t getting a new random number every time we run this function.</p>

<p>That&rsquo;s not the only weird thing about default arguments, though. Things can get messy even when you&rsquo;re not setting functions as default args&ndash;really, all it takes to break things is a mutable object.</p>

<pre><code class="python">&gt;&gt;&gt; def append_one(mylist = []):
...     mylist.append(1)
...     return mylist
&gt;&gt;&gt; append_one()
[1]
&gt;&gt;&gt; append_one()
[1, 1]
&gt;&gt;&gt; append_one()
[1, 1, 1]
&gt;&gt;&gt; append_one()
[1, 1, 1, 1]
&gt;&gt;&gt; append_one()
[1, 1, 1, 1, 1]
</code></pre>

<p>As with the function-as-default-arg example, your default argument binds <em>at definition</em>&ndash;and what&rsquo;s more, it binds to a specific object in memory. So every time you call <code>append_one</code>, you&rsquo;re not appending one to a new empty list, you&rsquo;re appending one to <em>that exact empty list that you created in memory, which now has more and more things in it</em>. It&rsquo;s the same as if you passed in an existing, named list as your default:</p>

<pre><code class="python">&gt;&gt;&gt; stuff = [1,3,5,7]
&gt;&gt;&gt; def append_one(mylist = stuff):
...     mylist.append(1)
...     return mylist
&gt;&gt;&gt; append_one()
[1, 3, 5, 7, 1]
&gt;&gt;&gt; append_one()
[1, 3, 5, 7, 1, 1]
&gt;&gt;&gt; append_one()
[1, 3, 5, 7, 1, 1, 1]
</code></pre>

<p>Perhaps it&rsquo;s a bit more intuitive this way, but the exact same thing is happening in the previous example; the function is modifying a distinct object in memory, whether it was named before it got passed as a default argument or not.</p>

<p>Whacky fun! And a valuable lesson learned: <em>don&rsquo;t use mutable objects or functions as default values in your functions</em> unless you want a whole lot of hilarious code hijinks. (Which, hey, maybe you do, no judgements here!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript/JQuery 101]]></title>
    <link href="http://maiamcc.github.io/blog/2014/09/24/javascript-jquery-101/"/>
    <updated>2014-09-24T16:28:38-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/09/24/javascript-jquery-101</id>
    <content type="html"><![CDATA[<p>Funnily enough, when you&rsquo;re teaching yourself how to do stuff pretty much from scratch, sans tutorials or guidance, you miss a few crucial points. Weird, right? Here (mostly for my own records, but you can read it if you want!) are the things I learned this afternoon from some code review of my Javascript/JQuery/Datatables code for my contra database:</p>

<p>JS != JQuery!!! They&rsquo;re different things! They each have different sets of methods, and you need to keep track of whether any given thing you&rsquo;re dealing with in web scripting is a JQuery or DOM (and therefore JS) object. <!-- more -->If it&rsquo;s avoidable, don&rsquo;t mix JS and JQuery&ndash;be consistent within one document. Usually, JQuery is more precise and prettier. Consider using dollar signs at the beginning of your variable names to indicate that they point to JQuery objects, so you don&rsquo;t get confused. Most if not all JS functions have (generally shorter, prettier) JQuery equivalents. Here are some that I replaced in my code today:</p>

<table><tr><td>
    <strong>JS</strong>
</td><td>
    <strong>JQuery</strong>
</td></tr>
<tr><td>
<code>
    getElementByID("foo")
</code>
</td><td>
<code>
    $('#foo')
</code>
</td></tr>

<tr><td>
<code>
    getElementsByClassName("bar")
</code>
</td><td>
<code>
    $('.bar')
</code>
</td></tr>

<tr><td>
<code>
    this
</code>
</td><td>
<code>
    $(this)
</code>
</td></tr>

<tr><td>
<code>
    .setAttribute("foo","bar")
</code>
</td><td>
<code>
    .attr("foo", "bar")
</code>
</td></tr>

<tr><td>
<code>
    .getAttribute("foo")
</code>
</td><td>
<code>
    .attr("foo")
</code>
</td></tr>

<tr><td>
<code>
    .value
</code>
</td><td>
<code>
    .val()
</code>
</td></tr>

<tr><td>
<code>
    .parentNode
</code>
</td><td>
<code>
    .parent()
</code>
</td></tr>
</table>


<p><p>
JQuery functions like <code>$(".bar")</code> or <code>$(".mytag")</code> (which gets all elements matching class &ldquo;bar&rdquo; and html tag &ldquo;mytag&rdquo;, respectively) return arrays of DOM elements. If you want to get something from this array, it can be tempting to pluck it from its index, a la <code>$(".bar")[2]</code>. <em>Be warned</em>: this returns a DOM element, and therefore you can&rsquo;t do shiny JQuery stuff to it. Instead, get that same element as a JQuery object with <code>$(".bar").eq(2)</code> (where the <code>eq</code> function takes as an argument the index of the thing you want to get out of the array). I can&rsquo;t tell you how much pain this would have saved me if I had known this at the beginning of my project.</p>

<p>On the &ldquo;pesky formatting details&rdquo; front, JS indents with only two spaces, and puts semicolons after every line that doesn&rsquo;t end in a curly brace. I swear, this will take me another three years to do properly and consistently. And when I master it, it will ruin my Python. Yeargh. Also, Javascript pitches possibly the least helpful errors ever. Okay, complaining over.</p>

<p>Anyway, I have a working (if ugly) search page that magically sprouts new search fields everywhere, and a working (if ugly) datatable that displays the dances in my database with collapsable child rows for additional information, and a understand a little bit more about Javascript/JQuery for web work! Huzzah!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So Much for That Project]]></title>
    <link href="http://maiamcc.github.io/blog/2014/09/17/so-much-for-that-project/"/>
    <updated>2014-09-17T12:22:01-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/09/17/so-much-for-that-project</id>
    <content type="html"><![CDATA[<p>Alas, it seems that my dreams of writing a choral harmonizer in the style of J.S. Bach have to be put to bed until another day. Susan and I have been taking various stabs at this, triyng out a few ineffective Python midi programs (one of these, incidentally, had ZERO documentation and was THE MOST FRUSTRATING THING EVER) before settling on <a href="https://code.google.com/p/mingus/">mingus</a>, a midi/music theory Python library. Unfortunately, it seems like no one&rsquo;s addressed any bug reports since 2011, so when we realized that midi read-in was totally borked, we were a little stymied. Specficially, if we gave it this file as input:</p>

<p><img src="/images/mingusbug_input.png" alt="Input file" /></p>

<p>It returned this mess here:</p>

<p><img src="/images/mingusbug_output.png" alt="Output file" /></p>

<!-- more -->


<p>For the record, what seems to be going on here, as far as we can tell, is that while the notes have been preserved, the rhythms have all shifted over by one. The first note has been magically converted into a quarter note, and each note after that has the duration that ought to have belonged to the note before it. (To explain it another way: assume that we have a list of original notes and we&rsquo;re making a list of new notes, where each new note OUGHT to be identical to its corersponding original note. Instead, we get <code>newnote[0].duration == quarter</code>, <code>newnote[1].duration == orignote[0].duration</code>, <code>newnote[2].duration == orignote[1].duration</code>, etc.)</p>

<p>So, <a href="https://code.google.com/p/mingus/issues/detail?id=125">we&rsquo;ve submitted a bug report</a> but we&rsquo;re not optimistic since, like I mentioned, the last answered bug is from 2011. But one day, when my heart has healed, I&rsquo;ll go off looking for ways to fix this or for other Python midi libraries that are suitable for this project, and then I&rsquo;ll take another swing at the choral generator! (Any suggestions? Send them my way! I&rsquo;m looking for a lib that can read, inspect, write, and output midi.)</p>

<p>Until then, as I near the end of HS, it&rsquo;s actually surprisingly freeing to have one less thing to worry about getting done. Obviously I&rsquo;m not going to finish all of this stuff before HS ends, but here&rsquo;s what&rsquo;s on my docket at the moment:</p>

<ul>
<li>contradance database (search logic, and eventually expanding and populating database)</li>
<li>sudoku solver (so close&hellip;!)</li>
<li>more work on the fabulous <a href="http://hypatia.ca/">Leigh Honeywell</a>&rsquo;s <a href="https://github.com/hypatia/virtuoso">Virtuoso Project</a>, which will soon be a web app that doles out writing exercises to fight imposter syndrome, and is also a fabulous excuse for me to learn Bootstrap and play with design.</li>
<li>goob.py, a fake git</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asking for TOO MUCH Help?]]></title>
    <link href="http://maiamcc.github.io/blog/2014/09/16/asking-for-too-much-help/"/>
    <updated>2014-09-16T12:47:54-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/09/16/asking-for-too-much-help</id>
    <content type="html"><![CDATA[<p>(Apparently some people at Hacker School think I&rsquo;m an Iron Blogger, despite me being nothing of the sort. There&rsquo;s no money riding on whether or not I make consistent blog posts&ndash;but I figure I should do what I can to sustain this favorable impression of me!)</p>

<p>Since my HS halfway check-in, I&rsquo;ve resolved to ask more questions and not let myself get stuck banging my head against problems that could be solved in a hot second by any of the three people sitting next to me. I think that I&rsquo;ve done a pretty good job with this resolution; I ask for help way more frequently, and as a result, I think I get more done. However, I feel the need to remind myself that there is such a thing as <em>asking for too much help</em>.</p>

<p>Take this example: I was sitting down with Tristan, a fellow HSer, attempting to set up virtualenv and get all of my permissions and installs un-borked. I was totally in over my head, having never used virtualenv before, and he was helping me sort it out. There was some funky stuff that needed fixing having to do with my $PATH being invalid because one of the folder names contained a space. We dealt with that issue, and now most of the stuff worked, but I still couldn&rsquo;t manage to run bpython from inside my virtualenv. I showed Tristan the error message my computer was spewing, and asked him, &ldquo;What&rsquo;s going on?&rdquo;</p>

<p>His response: &ldquo;What do you think is going on?&rdquo;</p>

<p>Me: &ldquo;Well, it won&rsquo;t run bpython!&rdquo;</p>

<p>Him: &ldquo;Come on, you can do better than that.&rdquo;<!-- more --></p>

<p>When he said this, I was somewhat shocked to realize that I hadn&rsquo;t even fully read the text of the error message&ndash;I assumed that it would be gibberish to me, as such messages often are, and that I would need to find someone with greater terminal-fu to help me decipher it.</p>

<p>I can&rsquo;t remember now what exactly the problem was, but it was something having to do with the fact that my shiny new un-borked $PATH wasn&rsquo;t finding bpython because I had sudo installed it somewhere outside the virtualenv&hellip; (That sounds kind of illogical now that I write it, but I promise it was a real problem.) Regardless, by carefully reading the error message and talking it through with Tristan, I was able to figure out what had to be done pretty much on my own. It was super exciting, of course, because for most of Hacker School the terminal has remained an almost entirely opaque black box of sorcery (and possibly gnomes), but more than that, it made me sit up and realize that it <em>is</em> within my power to solve a lot of the problems that I come across.</p>

<p>Now I have two things to balance. Obviously, I want to keep asking questions, learning new things, keeping myself from getting stuck in ruts. But there&rsquo;s also something to be said for that fifteen-minute window to work on a problem before I turn to Zulip or the person next to me. I tend to assume that anything I don&rsquo;t know is a result of my limited programming background, and is something that I can learn <em>massively</em> faster from a person than from hunting around on StackOverflow. And yes, this is often the case, but when it&rsquo;s not&ndash;or even when it is&ndash;the trouble-shooting and debugging and StackOverflow-ing and playing around in the REPL are all supremely valuable skills. I can solve my own problems more often than I expect, and should remember that!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Observations from Phonebook Code Review]]></title>
    <link href="http://maiamcc.github.io/blog/2014/09/12/observations-from-phonebook-code-review/"/>
    <updated>2014-09-12T15:38:52-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/09/12/observations-from-phonebook-code-review</id>
    <content type="html"><![CDATA[<p>Here are some gleanings from Amy&rsquo;s code review of <a href="https://github.com/maiamcc/phonebook">my phonebook applet</a>, and some self-study. Mostly for my own records and so I actually absorb all of this by writing out, but if anyone has comments, additions, disagreements with anything I&rsquo;ve written here, fire away!</p>

<ul>
<li>misc. layout stuff, like putting import statements in alphabetical order</li>
<li>avoid global vars when possible. I already knew this, but it&rsquo;s good to remember. For example, if you&rsquo;ve assuming your program will be run on the command line, you can put global vars in the <code>main()</code> function.</li>
<li>functions that only incedentally return stuff are <em>bad news</em>. I had a function called <code>phonebook_exists</code> that checked to see if the phonebook you were trying to look up existed; if it didn&rsquo;t exist, the func. would throw an error, and if it did, it would return the data of the phonebook. Which in retrospect was super weird because nothing the function name indicated that it was what you should use to get the contents of a saved phonebook. A much more sensible way to do this is to have a function called <code>read_phonebook</code> which attempts to return the contents of the saved phonebook, but if it fails (which you figure out with a try/except), then it throws an error. (Incidentally, I had a similar confusion with when things should and shouldn&rsquo;t be returned in another project I&rsquo;m working on, my bootleg homemade git. I had a function called <code>save_at_hash</code> that would hash a file, save it at its hash, and then return the hash. Why did this function return the hash? I assumed it would be useful. Couldn&rsquo;t really tell you why. I ended up refactoring it into two functions, <code>make_hash</code>&ndash;which took a file and returned a hash&ndash;and <code>save_at_hash</code>&ndash;which took a file and a hash and saved a copy of the file at that hash.)<!-- more --></li>
<li><p>relatedly, try/except is your friend. I suspect that if you need a function that checks something&rsquo;s validity before running another function on it, if the check is simple, that checking func is probably unnessary and you can handle that behavior with a try/except in the function that actually does stuff. Pydocs puts it wonderfully:</p>

<blockquote><p><a href="https://docs.python.org/2/glossary.html#term-eafp">EAFP</a> (Easier to Ask for Forgiveness than Permission):</p>

<p>This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many <code>try</code> and <code>except</code> statements. The technique contrasts with the <a href="https://docs.python.org/2/glossary.html#term-lbyl">LBYL</a> style common to many other languages such as C.</p></blockquote></li>
<li><p>but even though try/except is great, be wary! It can make debugging a mess&ndash;had something in here that caught TypeErrors, which exploded on Amy when she made a change that caught a type error, but my program printed &ldquo;more arguments needed&rdquo; instead of anything helpful like, y&#8217;know, a stacktrace.</p></li>
<li>if you&rsquo;re defining a dict., it looks prettiest to put spaces on both sides of the colon</li>
<li>string concat. is a) ugly and b) not very efficient. Use string interpolation (or in a pinch, <code>join</code>) instead.</li>
<li>you can search for substrings with <code>"substring" in "string"</code>! Who knew? I wrote a whole human-written-input parser using <code>if string.find(substring) &gt; -1</code>. My life has just changed.</li>
<li>in <code>for</code> loops, explicit var names are the way to go. I&rsquo;m usually decent about this when looping through lists, strings, whatever, but for some reason I tend to look through dictionaries with a very undescript <code>for key in mydict</code>.</li>
<li><code>.txt</code> extensions are totally unnecessary. Text files don&rsquo;t even need extensions.</li>
<li>streamlined, logical, one-thing-per-commit git histories are awesome!</li>
<li><code>str.startswith</code> and <code>str.endswith</code> are a thing! (Are both things?) Exciting! Now I want to go through all of the code I&rsquo;ve been writing recently and use these to replace any hard-coded integers in string manipulation, because that stuff&rsquo;s gross, man.</li>
<li>tests. Tests are good. Write them.</li>
</ul>

]]></content>
  </entry>
  
</feed>
